use core::ffi::{c_void};

#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPipelineCacheHeaderVersion {
    PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
    PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkResult {
    SUCCESS = 0,
    NOT_READY = 1,
    TIMEOUT = 2,
    EVENT_SET = 3,
    EVENT_RESET = 4,
    INCOMPLETE = 5,
    ERROR_OUT_OF_HOST_MEMORY = -1,
    ERROR_OUT_OF_DEVICE_MEMORY = -2,
    ERROR_INITIALIZATION_FAILED = -3,
    ERROR_DEVICE_LOST = -4,
    ERROR_MEMORY_MAP_FAILED = -5,
    ERROR_LAYER_NOT_PRESENT = -6,
    ERROR_EXTENSION_NOT_PRESENT = -7,
    ERROR_FEATURE_NOT_PRESENT = -8,
    ERROR_INCOMPATIBLE_DRIVER = -9,
    ERROR_TOO_MANY_OBJECTS = -10,
    ERROR_FORMAT_NOT_SUPPORTED = -11,
    ERROR_FRAGMENTED_POOL = -12,
    ERROR_UNKNOWN = -13,
    ERROR_OUT_OF_POOL_MEMORY = -1000069000,
    ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
    ERROR_FRAGMENTATION = -1000161000,
    ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
    ERROR_SURFACE_LOST_KHR = -1000000000,
    ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    SUBOPTIMAL_KHR = 1000001003,
    ERROR_OUT_OF_DATE_KHR = -1000001004,
    ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    ERROR_VALIDATION_FAILED_EXT = -1000011001,
    ERROR_INVALID_SHADER_NV = -1000012000,
    ERROR_INCOMPATIBLE_VERSION_KHR = -1000150000,
    ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    ERROR_NOT_PERMITTED_EXT = -1000174001,
    ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
    THREAD_IDLE_KHR = 1000268000,
    THREAD_DONE_KHR = 1000268001,
    OPERATION_DEFERRED_KHR = 1000268002,
    OPERATION_NOT_DEFERRED_KHR = 1000268003,
    PIPELINE_COMPILE_REQUIRED_EXT = 1000297000,
    ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
    ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
    ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,
    ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED_EXT,
    RESULT_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkStructureType {
    STRUCTURE_TYPE_APPLICATION_INFO = 0,
    STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    STRUCTURE_TYPE_SUBMIT_INFO = 4,
    STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
    STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
    STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
    STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
    STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
    STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
    STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
    STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
    STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
    STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
    STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
    STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
    STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
    STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
    STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
    STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
    STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
    STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
    STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
    STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
    STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
    STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
    STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
    STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000,
    STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
    STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
    STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
    STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
    STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
    STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
    STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
    STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
    STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
    STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
    STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
    STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
    STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
    STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
    STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
    STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
    STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
    STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
    STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
    STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
    STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
    STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
    STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
    STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
    STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
    STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR = 1000165006,
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000165007,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR = 1000150001,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR = 1000150008,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR = 1000150009,
    STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
    STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
    STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR = 1000150013,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR = 1000150014,
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
    STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
    STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
    STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
    STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
    STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
    STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
    STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
    STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
    STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
    STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
    STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
    STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
    STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
    STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
    STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
    STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
    STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
    STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
    STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
    STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
    STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
    STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
    STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
    STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
    STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
    STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
    STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
    STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
    STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
    STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
    STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
    STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
    STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
    STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
    STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000,
    STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
    STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
    STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000,
    STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
    STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
    STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
    STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
    STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
    STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
    STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
    STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
    STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
    STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR = 1000268000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
    STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
    STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
    STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
    STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
    STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
    STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
    STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
    STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001,
    STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
    STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
    STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
    STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000,
    STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001,
    STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
    STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
    STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
    STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
    STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
    STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
    STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
    STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
    STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
    STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
    STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
    STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
    STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
    STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
    STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
    STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
    STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
    STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
    STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
    STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
    STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
    STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
    STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
    STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
    STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
    STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
    STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
    STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
    STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
    STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
    STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
    STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
    STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
    STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
    STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
    STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
    STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
    STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
    STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
    STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
    STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
    STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
    STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
    STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
    STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
    STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
    STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
    STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
    STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR,
    STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
    STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
    STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
    STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
    STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
    STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
    STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
    STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
    STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
    STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
    STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
    STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
    STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
    STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
    STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSystemAllocationScope {
    SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkInternalAllocationType {
    INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkFormat {
    FORMAT_UNDEFINED = 0,
    FORMAT_R4G4_UNORM_PACK8 = 1,
    FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    FORMAT_R5G6B5_UNORM_PACK16 = 4,
    FORMAT_B5G6R5_UNORM_PACK16 = 5,
    FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    FORMAT_R8_UNORM = 9,
    FORMAT_R8_SNORM = 10,
    FORMAT_R8_USCALED = 11,
    FORMAT_R8_SSCALED = 12,
    FORMAT_R8_UINT = 13,
    FORMAT_R8_SINT = 14,
    FORMAT_R8_SRGB = 15,
    FORMAT_R8G8_UNORM = 16,
    FORMAT_R8G8_SNORM = 17,
    FORMAT_R8G8_USCALED = 18,
    FORMAT_R8G8_SSCALED = 19,
    FORMAT_R8G8_UINT = 20,
    FORMAT_R8G8_SINT = 21,
    FORMAT_R8G8_SRGB = 22,
    FORMAT_R8G8B8_UNORM = 23,
    FORMAT_R8G8B8_SNORM = 24,
    FORMAT_R8G8B8_USCALED = 25,
    FORMAT_R8G8B8_SSCALED = 26,
    FORMAT_R8G8B8_UINT = 27,
    FORMAT_R8G8B8_SINT = 28,
    FORMAT_R8G8B8_SRGB = 29,
    FORMAT_B8G8R8_UNORM = 30,
    FORMAT_B8G8R8_SNORM = 31,
    FORMAT_B8G8R8_USCALED = 32,
    FORMAT_B8G8R8_SSCALED = 33,
    FORMAT_B8G8R8_UINT = 34,
    FORMAT_B8G8R8_SINT = 35,
    FORMAT_B8G8R8_SRGB = 36,
    FORMAT_R8G8B8A8_UNORM = 37,
    FORMAT_R8G8B8A8_SNORM = 38,
    FORMAT_R8G8B8A8_USCALED = 39,
    FORMAT_R8G8B8A8_SSCALED = 40,
    FORMAT_R8G8B8A8_UINT = 41,
    FORMAT_R8G8B8A8_SINT = 42,
    FORMAT_R8G8B8A8_SRGB = 43,
    FORMAT_B8G8R8A8_UNORM = 44,
    FORMAT_B8G8R8A8_SNORM = 45,
    FORMAT_B8G8R8A8_USCALED = 46,
    FORMAT_B8G8R8A8_SSCALED = 47,
    FORMAT_B8G8R8A8_UINT = 48,
    FORMAT_B8G8R8A8_SINT = 49,
    FORMAT_B8G8R8A8_SRGB = 50,
    FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    FORMAT_R16_UNORM = 70,
    FORMAT_R16_SNORM = 71,
    FORMAT_R16_USCALED = 72,
    FORMAT_R16_SSCALED = 73,
    FORMAT_R16_UINT = 74,
    FORMAT_R16_SINT = 75,
    FORMAT_R16_SFLOAT = 76,
    FORMAT_R16G16_UNORM = 77,
    FORMAT_R16G16_SNORM = 78,
    FORMAT_R16G16_USCALED = 79,
    FORMAT_R16G16_SSCALED = 80,
    FORMAT_R16G16_UINT = 81,
    FORMAT_R16G16_SINT = 82,
    FORMAT_R16G16_SFLOAT = 83,
    FORMAT_R16G16B16_UNORM = 84,
    FORMAT_R16G16B16_SNORM = 85,
    FORMAT_R16G16B16_USCALED = 86,
    FORMAT_R16G16B16_SSCALED = 87,
    FORMAT_R16G16B16_UINT = 88,
    FORMAT_R16G16B16_SINT = 89,
    FORMAT_R16G16B16_SFLOAT = 90,
    FORMAT_R16G16B16A16_UNORM = 91,
    FORMAT_R16G16B16A16_SNORM = 92,
    FORMAT_R16G16B16A16_USCALED = 93,
    FORMAT_R16G16B16A16_SSCALED = 94,
    FORMAT_R16G16B16A16_UINT = 95,
    FORMAT_R16G16B16A16_SINT = 96,
    FORMAT_R16G16B16A16_SFLOAT = 97,
    FORMAT_R32_UINT = 98,
    FORMAT_R32_SINT = 99,
    FORMAT_R32_SFLOAT = 100,
    FORMAT_R32G32_UINT = 101,
    FORMAT_R32G32_SINT = 102,
    FORMAT_R32G32_SFLOAT = 103,
    FORMAT_R32G32B32_UINT = 104,
    FORMAT_R32G32B32_SINT = 105,
    FORMAT_R32G32B32_SFLOAT = 106,
    FORMAT_R32G32B32A32_UINT = 107,
    FORMAT_R32G32B32A32_SINT = 108,
    FORMAT_R32G32B32A32_SFLOAT = 109,
    FORMAT_R64_UINT = 110,
    FORMAT_R64_SINT = 111,
    FORMAT_R64_SFLOAT = 112,
    FORMAT_R64G64_UINT = 113,
    FORMAT_R64G64_SINT = 114,
    FORMAT_R64G64_SFLOAT = 115,
    FORMAT_R64G64B64_UINT = 116,
    FORMAT_R64G64B64_SINT = 117,
    FORMAT_R64G64B64_SFLOAT = 118,
    FORMAT_R64G64B64A64_UINT = 119,
    FORMAT_R64G64B64A64_SINT = 120,
    FORMAT_R64G64B64A64_SFLOAT = 121,
    FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    FORMAT_D16_UNORM = 124,
    FORMAT_X8_D24_UNORM_PACK32 = 125,
    FORMAT_D32_SFLOAT = 126,
    FORMAT_S8_UINT = 127,
    FORMAT_D16_UNORM_S8_UINT = 128,
    FORMAT_D24_UNORM_S8_UINT = 129,
    FORMAT_D32_SFLOAT_S8_UINT = 130,
    FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    FORMAT_BC2_UNORM_BLOCK = 135,
    FORMAT_BC2_SRGB_BLOCK = 136,
    FORMAT_BC3_UNORM_BLOCK = 137,
    FORMAT_BC3_SRGB_BLOCK = 138,
    FORMAT_BC4_UNORM_BLOCK = 139,
    FORMAT_BC4_SNORM_BLOCK = 140,
    FORMAT_BC5_UNORM_BLOCK = 141,
    FORMAT_BC5_SNORM_BLOCK = 142,
    FORMAT_BC6H_UFLOAT_BLOCK = 143,
    FORMAT_BC6H_SFLOAT_BLOCK = 144,
    FORMAT_BC7_UNORM_BLOCK = 145,
    FORMAT_BC7_SRGB_BLOCK = 146,
    FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    FORMAT_EAC_R11_UNORM_BLOCK = 153,
    FORMAT_EAC_R11_SNORM_BLOCK = 154,
    FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
    FORMAT_G8B8G8R8_422_UNORM = 1000156000,
    FORMAT_B8G8R8G8_422_UNORM = 1000156001,
    FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
    FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
    FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
    FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
    FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
    FORMAT_R10X6_UNORM_PACK16 = 1000156007,
    FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
    FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
    FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
    FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
    FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
    FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
    FORMAT_R12X4_UNORM_PACK16 = 1000156017,
    FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
    FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
    FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
    FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
    FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
    FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
    FORMAT_G16B16G16R16_422_UNORM = 1000156027,
    FORMAT_B16G16R16G16_422_UNORM = 1000156028,
    FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
    FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
    FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
    FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
    FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
    FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
    FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
    FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
    FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
    FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
    FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
    FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
    FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
    FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
    FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
    FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
    FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
    FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
    FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,
    FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
    FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
    FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
    FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
    FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
    FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
    FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
    FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
    FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
    FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
    FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
    FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
    FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
    FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
    FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
    FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
    FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
    FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
    FORMAT_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkImageType {
    IMAGE_TYPE_1D = 0,
    IMAGE_TYPE_2D = 1,
    IMAGE_TYPE_3D = 2,
    IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkImageTiling {
    IMAGE_TILING_OPTIMAL = 0,
    IMAGE_TILING_LINEAR = 1,
    IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
    IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPhysicalDeviceType {
    PHYSICAL_DEVICE_TYPE_OTHER = 0,
    PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    PHYSICAL_DEVICE_TYPE_CPU = 4,
    PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkQueryType {
    QUERY_TYPE_OCCLUSION = 0,
    QUERY_TYPE_PIPELINE_STATISTICS = 1,
    QUERY_TYPE_TIMESTAMP = 2,
    QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
    QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
    QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000165000,
    QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150000,
    QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
    QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR,
    QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSharingMode {
    SHARING_MODE_EXCLUSIVE = 0,
    SHARING_MODE_CONCURRENT = 1,
    SHARING_MODE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkImageLayout {
    IMAGE_LAYOUT_UNDEFINED = 0,
    IMAGE_LAYOUT_GENERAL = 1,
    IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    IMAGE_LAYOUT_PREINITIALIZED = 8,
    IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
    IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
    IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
    IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
    IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
    IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
    IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
    IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
    IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
    IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
    IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
    IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
    IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
    IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkImageViewType {
    IMAGE_VIEW_TYPE_1D = 0,
    IMAGE_VIEW_TYPE_2D = 1,
    IMAGE_VIEW_TYPE_3D = 2,
    IMAGE_VIEW_TYPE_CUBE = 3,
    IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkComponentSwizzle {
    COMPONENT_SWIZZLE_IDENTITY = 0,
    COMPONENT_SWIZZLE_ZERO = 1,
    COMPONENT_SWIZZLE_ONE = 2,
    COMPONENT_SWIZZLE_R = 3,
    COMPONENT_SWIZZLE_G = 4,
    COMPONENT_SWIZZLE_B = 5,
    COMPONENT_SWIZZLE_A = 6,
    COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkVertexInputRate {
    VERTEX_INPUT_RATE_VERTEX = 0,
    VERTEX_INPUT_RATE_INSTANCE = 1,
    VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPrimitiveTopology {
    PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
    PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPolygonMode {
    POLYGON_MODE_FILL = 0,
    POLYGON_MODE_LINE = 1,
    POLYGON_MODE_POINT = 2,
    POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkFrontFace {
    FRONT_FACE_COUNTER_CLOCKWISE = 0,
    FRONT_FACE_CLOCKWISE = 1,
    FRONT_FACE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCompareOp {
    COMPARE_OP_NEVER = 0,
    COMPARE_OP_LESS = 1,
    COMPARE_OP_EQUAL = 2,
    COMPARE_OP_LESS_OR_EQUAL = 3,
    COMPARE_OP_GREATER = 4,
    COMPARE_OP_NOT_EQUAL = 5,
    COMPARE_OP_GREATER_OR_EQUAL = 6,
    COMPARE_OP_ALWAYS = 7,
    COMPARE_OP_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkStencilOp {
    STENCIL_OP_KEEP = 0,
    STENCIL_OP_ZERO = 1,
    STENCIL_OP_REPLACE = 2,
    STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    STENCIL_OP_INVERT = 5,
    STENCIL_OP_INCREMENT_AND_WRAP = 6,
    STENCIL_OP_DECREMENT_AND_WRAP = 7,
    STENCIL_OP_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkLogicOp {
    LOGIC_OP_CLEAR = 0,
    LOGIC_OP_AND = 1,
    LOGIC_OP_AND_REVERSE = 2,
    LOGIC_OP_COPY = 3,
    LOGIC_OP_AND_INVERTED = 4,
    LOGIC_OP_NO_OP = 5,
    LOGIC_OP_XOR = 6,
    LOGIC_OP_OR = 7,
    LOGIC_OP_NOR = 8,
    LOGIC_OP_EQUIVALENT = 9,
    LOGIC_OP_INVERT = 10,
    LOGIC_OP_OR_REVERSE = 11,
    LOGIC_OP_COPY_INVERTED = 12,
    LOGIC_OP_OR_INVERTED = 13,
    LOGIC_OP_NAND = 14,
    LOGIC_OP_SET = 15,
    LOGIC_OP_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkBlendFactor {
    BLEND_FACTOR_ZERO = 0,
    BLEND_FACTOR_ONE = 1,
    BLEND_FACTOR_SRC_COLOR = 2,
    BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    BLEND_FACTOR_DST_COLOR = 4,
    BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    BLEND_FACTOR_SRC_ALPHA = 6,
    BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    BLEND_FACTOR_DST_ALPHA = 8,
    BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    BLEND_FACTOR_CONSTANT_COLOR = 10,
    BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    BLEND_FACTOR_CONSTANT_ALPHA = 12,
    BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    BLEND_FACTOR_SRC1_COLOR = 15,
    BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    BLEND_FACTOR_SRC1_ALPHA = 17,
    BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
    BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkBlendOp {
    BLEND_OP_ADD = 0,
    BLEND_OP_SUBTRACT = 1,
    BLEND_OP_REVERSE_SUBTRACT = 2,
    BLEND_OP_MIN = 3,
    BLEND_OP_MAX = 4,
    BLEND_OP_ZERO_EXT = 1000148000,
    BLEND_OP_SRC_EXT = 1000148001,
    BLEND_OP_DST_EXT = 1000148002,
    BLEND_OP_SRC_OVER_EXT = 1000148003,
    BLEND_OP_DST_OVER_EXT = 1000148004,
    BLEND_OP_SRC_IN_EXT = 1000148005,
    BLEND_OP_DST_IN_EXT = 1000148006,
    BLEND_OP_SRC_OUT_EXT = 1000148007,
    BLEND_OP_DST_OUT_EXT = 1000148008,
    BLEND_OP_SRC_ATOP_EXT = 1000148009,
    BLEND_OP_DST_ATOP_EXT = 1000148010,
    BLEND_OP_XOR_EXT = 1000148011,
    BLEND_OP_MULTIPLY_EXT = 1000148012,
    BLEND_OP_SCREEN_EXT = 1000148013,
    BLEND_OP_OVERLAY_EXT = 1000148014,
    BLEND_OP_DARKEN_EXT = 1000148015,
    BLEND_OP_LIGHTEN_EXT = 1000148016,
    BLEND_OP_COLORDODGE_EXT = 1000148017,
    BLEND_OP_COLORBURN_EXT = 1000148018,
    BLEND_OP_HARDLIGHT_EXT = 1000148019,
    BLEND_OP_SOFTLIGHT_EXT = 1000148020,
    BLEND_OP_DIFFERENCE_EXT = 1000148021,
    BLEND_OP_EXCLUSION_EXT = 1000148022,
    BLEND_OP_INVERT_EXT = 1000148023,
    BLEND_OP_INVERT_RGB_EXT = 1000148024,
    BLEND_OP_LINEARDODGE_EXT = 1000148025,
    BLEND_OP_LINEARBURN_EXT = 1000148026,
    BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
    BLEND_OP_LINEARLIGHT_EXT = 1000148028,
    BLEND_OP_PINLIGHT_EXT = 1000148029,
    BLEND_OP_HARDMIX_EXT = 1000148030,
    BLEND_OP_HSL_HUE_EXT = 1000148031,
    BLEND_OP_HSL_SATURATION_EXT = 1000148032,
    BLEND_OP_HSL_COLOR_EXT = 1000148033,
    BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
    BLEND_OP_PLUS_EXT = 1000148035,
    BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
    BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    BLEND_OP_PLUS_DARKER_EXT = 1000148038,
    BLEND_OP_MINUS_EXT = 1000148039,
    BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
    BLEND_OP_CONTRAST_EXT = 1000148041,
    BLEND_OP_INVERT_OVG_EXT = 1000148042,
    BLEND_OP_RED_EXT = 1000148043,
    BLEND_OP_GREEN_EXT = 1000148044,
    BLEND_OP_BLUE_EXT = 1000148045,
    BLEND_OP_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDynamicState {
    DYNAMIC_STATE_VIEWPORT = 0,
    DYNAMIC_STATE_SCISSOR = 1,
    DYNAMIC_STATE_LINE_WIDTH = 2,
    DYNAMIC_STATE_DEPTH_BIAS = 3,
    DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
    DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
    DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
    DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
    DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkFilter {
    FILTER_NEAREST = 0,
    FILTER_LINEAR = 1,
    FILTER_CUBIC_IMG = 1000015000,
    FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
    FILTER_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSamplerMipmapMode {
    SAMPLER_MIPMAP_MODE_NEAREST = 0,
    SAMPLER_MIPMAP_MODE_LINEAR = 1,
    SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSamplerAddressMode {
    SAMPLER_ADDRESS_MODE_REPEAT = 0,
    SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
    SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
    SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkBorderColor {
    BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
    BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
    BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDescriptorType {
    DESCRIPTOR_TYPE_SAMPLER = 0,
    DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
    DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000,
    DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR,
    DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkAttachmentLoadOp {
    ATTACHMENT_LOAD_OP_LOAD = 0,
    ATTACHMENT_LOAD_OP_CLEAR = 1,
    ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkAttachmentStoreOp {
    ATTACHMENT_STORE_OP_STORE = 0,
    ATTACHMENT_STORE_OP_DONT_CARE = 1,
    ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000,
    ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPipelineBindPoint {
    PIPELINE_BIND_POINT_GRAPHICS = 0,
    PIPELINE_BIND_POINT_COMPUTE = 1,
    PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
    PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
    PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCommandBufferLevel {
    COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkIndexType {
    INDEX_TYPE_UINT16 = 0,
    INDEX_TYPE_UINT32 = 1,
    INDEX_TYPE_NONE_KHR = 1000165000,
    INDEX_TYPE_UINT8_EXT = 1000265000,
    INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,
    INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSubpassContents {
    SUBPASS_CONTENTS_INLINE = 0,
    SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkObjectType {
    OBJECT_TYPE_UNKNOWN = 0,
    OBJECT_TYPE_INSTANCE = 1,
    OBJECT_TYPE_PHYSICAL_DEVICE = 2,
    OBJECT_TYPE_DEVICE = 3,
    OBJECT_TYPE_QUEUE = 4,
    OBJECT_TYPE_SEMAPHORE = 5,
    OBJECT_TYPE_COMMAND_BUFFER = 6,
    OBJECT_TYPE_FENCE = 7,
    OBJECT_TYPE_DEVICE_MEMORY = 8,
    OBJECT_TYPE_BUFFER = 9,
    OBJECT_TYPE_IMAGE = 10,
    OBJECT_TYPE_EVENT = 11,
    OBJECT_TYPE_QUERY_POOL = 12,
    OBJECT_TYPE_BUFFER_VIEW = 13,
    OBJECT_TYPE_IMAGE_VIEW = 14,
    OBJECT_TYPE_SHADER_MODULE = 15,
    OBJECT_TYPE_PIPELINE_CACHE = 16,
    OBJECT_TYPE_PIPELINE_LAYOUT = 17,
    OBJECT_TYPE_RENDER_PASS = 18,
    OBJECT_TYPE_PIPELINE = 19,
    OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
    OBJECT_TYPE_SAMPLER = 21,
    OBJECT_TYPE_DESCRIPTOR_POOL = 22,
    OBJECT_TYPE_DESCRIPTOR_SET = 23,
    OBJECT_TYPE_FRAMEBUFFER = 24,
    OBJECT_TYPE_COMMAND_POOL = 25,
    OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
    OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
    OBJECT_TYPE_SURFACE_KHR = 1000000000,
    OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
    OBJECT_TYPE_DISPLAY_KHR = 1000002000,
    OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
    OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
    OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
    OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000,
    OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
    OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
    OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
    OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
    OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000,
    OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
    OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
    OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR,
    OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkVendorId {
    VENDOR_ID_VIV = 0x10001,
    VENDOR_ID_VSI = 0x10002,
    VENDOR_ID_KAZAN = 0x10003,
    VENDOR_ID_CODEPLAY = 0x10004,
    VENDOR_ID_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkFormatFeatureFlagBits {
    FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,
    FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,
    FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,
    FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,
    FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,
    FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,
    FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,
    FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,
    FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,
    FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,
    FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,
    FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000,
    FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000,
    FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000,
    FORMAT_FEATURE_DISJOINT_BIT = 0x00400000,
    FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000,
    FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0x20000000,
    FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000,
    FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
    FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
    FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
    FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
    FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,
    FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
    FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
    FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkImageUsageFlagBits {
    IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,
    IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,
    IMAGE_USAGE_SAMPLED_BIT = 0x00000004,
    IMAGE_USAGE_STORAGE_BIT = 0x00000008,
    IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,
    IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
    IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,
    IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,
    IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00000100,
    IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200,
    IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkImageCreateFlagBits {
    IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,
    IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
    IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
    IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,
    IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,
    IMAGE_CREATE_ALIAS_BIT = 0x00000400,
    IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040,
    IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020,
    IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080,
    IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100,
    IMAGE_CREATE_PROTECTED_BIT = 0x00000800,
    IMAGE_CREATE_DISJOINT_BIT = 0x00000200,
    IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0x00002000,
    IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
    IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0x00004000,
    IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
    IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
    IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
    IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
    IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,
    IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,
    IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSampleCountFlagBits {
    SAMPLE_COUNT_1_BIT = 0x00000001,
    SAMPLE_COUNT_2_BIT = 0x00000002,
    SAMPLE_COUNT_4_BIT = 0x00000004,
    SAMPLE_COUNT_8_BIT = 0x00000008,
    SAMPLE_COUNT_16_BIT = 0x00000010,
    SAMPLE_COUNT_32_BIT = 0x00000020,
    SAMPLE_COUNT_64_BIT = 0x00000040,
    SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkQueueFlagBits {
    QUEUE_GRAPHICS_BIT = 0x00000001,
    QUEUE_COMPUTE_BIT = 0x00000002,
    QUEUE_TRANSFER_BIT = 0x00000004,
    QUEUE_SPARSE_BINDING_BIT = 0x00000008,
    QUEUE_PROTECTED_BIT = 0x00000010,
    QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkMemoryPropertyFlagBits {
    MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,
    MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,
    MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,
    MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,
    MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,
    MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020,
    MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040,
    MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080,
    MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkMemoryHeapFlagBits {
    MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001,
    MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002,
    MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
    MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDeviceQueueCreateFlagBits {
    DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0x00000001,
    DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPipelineStageFlagBits {
    PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
    PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
    PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
    PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
    PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
    PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
    PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
    PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
    PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
    PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
    PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
    PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
    PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
    PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
    PIPELINE_STAGE_HOST_BIT = 0x00004000,
    PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
    PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
    PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000,
    PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
    PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0x00200000,
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000,
    PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00400000,
    PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000,
    PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000,
    PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000,
    PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 0x00020000,
    PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
    PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkImageAspectFlagBits {
    IMAGE_ASPECT_COLOR_BIT = 0x00000001,
    IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
    IMAGE_ASPECT_STENCIL_BIT = 0x00000004,
    IMAGE_ASPECT_METADATA_BIT = 0x00000008,
    IMAGE_ASPECT_PLANE_0_BIT = 0x00000010,
    IMAGE_ASPECT_PLANE_1_BIT = 0x00000020,
    IMAGE_ASPECT_PLANE_2_BIT = 0x00000040,
    IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080,
    IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100,
    IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200,
    IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400,
    IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,
    IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,
    IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,
    IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSparseImageFormatFlagBits {
    SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001,
    SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002,
    SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
    SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSparseMemoryBindFlagBits {
    SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001,
    SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkFenceCreateFlagBits {
    FENCE_CREATE_SIGNALED_BIT = 0x00000001,
    FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkQueryPipelineStatisticFlagBits {
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,
    QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,
    QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,
    QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,
    QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,
    QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,
    QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,
    QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,
    QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
    QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,
    QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkQueryResultFlagBits {
    QUERY_RESULT_64_BIT = 0x00000001,
    QUERY_RESULT_WAIT_BIT = 0x00000002,
    QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
    QUERY_RESULT_PARTIAL_BIT = 0x00000008,
    QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkBufferCreateFlagBits {
    BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,
    BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
    BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
    BUFFER_CREATE_PROTECTED_BIT = 0x00000008,
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000010,
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkBufferUsageFlagBits {
    BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,
    BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,
    BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
    BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
    BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,
    BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,
    BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,
    BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,
    BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0x00020000,
    BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800,
    BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000,
    BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200,
    BUFFER_USAGE_RAY_TRACING_BIT_KHR = 0x00000400,
    BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR,
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkImageViewCreateFlagBits {
    IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0x00000001,
    IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkShaderModuleCreateFlagBits {
    SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPipelineCacheCreateFlagBits {
    PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 0x00000001,
    PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPipelineCreateFlagBits {
    PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,
    PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,
    PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,
    PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008,
    PIPELINE_CREATE_DISPATCH_BASE_BIT = 0x00000010,
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0x00004000,
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0x00008000,
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0x00010000,
    PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000,
    PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0x00001000,
    PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0x00002000,
    PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0x00000020,
    PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 0x00000040,
    PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0x00000080,
    PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 0x00040000,
    PIPELINE_CREATE_LIBRARY_BIT_KHR = 0x00000800,
    PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 0x00000100,
    PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 0x00000200,
    PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
    PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
    PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE,
    PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPipelineShaderStageCreateFlagBits {
    PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 0x00000001,
    PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 0x00000002,
    PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkShaderStageFlagBits {
    SHADER_STAGE_VERTEX_BIT = 0x00000001,
    SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
    SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
    SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
    SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
    SHADER_STAGE_COMPUTE_BIT = 0x00000020,
    SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
    SHADER_STAGE_ALL = 0x7FFFFFFF,
    SHADER_STAGE_RAYGEN_BIT_KHR = 0x00000100,
    SHADER_STAGE_ANY_HIT_BIT_KHR = 0x00000200,
    SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0x00000400,
    SHADER_STAGE_MISS_BIT_KHR = 0x00000800,
    SHADER_STAGE_INTERSECTION_BIT_KHR = 0x00001000,
    SHADER_STAGE_CALLABLE_BIT_KHR = 0x00002000,
    SHADER_STAGE_TASK_BIT_NV = 0x00000040,
    SHADER_STAGE_MESH_BIT_NV = 0x00000080,
    SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
    SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
    SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
    SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR,
    SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
    SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
    SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCullModeFlagBits {
    CULL_MODE_NONE = 0,
    CULL_MODE_FRONT_BIT = 0x00000001,
    CULL_MODE_BACK_BIT = 0x00000002,
    CULL_MODE_FRONT_AND_BACK = 0x00000003,
    CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkColorComponentFlagBits {
    COLOR_COMPONENT_R_BIT = 0x00000001,
    COLOR_COMPONENT_G_BIT = 0x00000002,
    COLOR_COMPONENT_B_BIT = 0x00000004,
    COLOR_COMPONENT_A_BIT = 0x00000008,
    COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSamplerCreateFlagBits {
    SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 0x00000001,
    SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002,
    SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDescriptorSetLayoutCreateFlagBits {
    DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 0x00000002,
    DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001,
    DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
    DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDescriptorPoolCreateFlagBits {
    DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001,
    DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 0x00000002,
    DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
    DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkFramebufferCreateFlagBits {
    FRAMEBUFFER_CREATE_IMAGELESS_BIT = 0x00000001,
    FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
    FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkRenderPassCreateFlagBits {
    RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 0x00000002,
    RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkAttachmentDescriptionFlagBits {
    ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,
    ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSubpassDescriptionFlagBits {
    SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001,
    SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
    SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 0x00000004,
    SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 0x00000008,
    SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkAccessFlagBits {
    ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,
    ACCESS_INDEX_READ_BIT = 0x00000002,
    ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
    ACCESS_UNIFORM_READ_BIT = 0x00000008,
    ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
    ACCESS_SHADER_READ_BIT = 0x00000020,
    ACCESS_SHADER_WRITE_BIT = 0x00000040,
    ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
    ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
    ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
    ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
    ACCESS_TRANSFER_READ_BIT = 0x00000800,
    ACCESS_TRANSFER_WRITE_BIT = 0x00001000,
    ACCESS_HOST_READ_BIT = 0x00002000,
    ACCESS_HOST_WRITE_BIT = 0x00004000,
    ACCESS_MEMORY_READ_BIT = 0x00008000,
    ACCESS_MEMORY_WRITE_BIT = 0x00010000,
    ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000,
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000,
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000,
    ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
    ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
    ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000,
    ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000,
    ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000,
    ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000,
    ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000,
    ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000,
    ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
    ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
    ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDependencyFlagBits {
    DEPENDENCY_BY_REGION_BIT = 0x00000001,
    DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004,
    DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002,
    DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,
    DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
    DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCommandPoolCreateFlagBits {
    COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,
    COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
    COMMAND_POOL_CREATE_PROTECTED_BIT = 0x00000004,
    COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCommandPoolResetFlagBits {
    COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCommandBufferUsageFlagBits {
    COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,
    COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
    COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,
    COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkQueryControlFlagBits {
    QUERY_CONTROL_PRECISE_BIT = 0x00000001,
    QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCommandBufferResetFlagBits {
    COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkStencilFaceFlagBits {
    STENCIL_FACE_FRONT_BIT = 0x00000001,
    STENCIL_FACE_BACK_BIT = 0x00000002,
    STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
    STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK,
    STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPointClippingBehavior {
    POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
    POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
    POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
    POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
    POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkTessellationDomainOrigin {
    TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
    TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
    TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
    TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
    TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSamplerYcbcrModelConversion {
    SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
    SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
    SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
    SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSamplerYcbcrRange {
    SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
    SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
    SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
    SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkChromaLocation {
    CHROMA_LOCATION_COSITED_EVEN = 0,
    CHROMA_LOCATION_MIDPOINT = 1,
    CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
    CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT,
    CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDescriptorUpdateTemplateType {
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
    DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSubgroupFeatureFlagBits {
    SUBGROUP_FEATURE_BASIC_BIT = 0x00000001,
    SUBGROUP_FEATURE_VOTE_BIT = 0x00000002,
    SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004,
    SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008,
    SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010,
    SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020,
    SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040,
    SUBGROUP_FEATURE_QUAD_BIT = 0x00000080,
    SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100,
    SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPeerMemoryFeatureFlagBits {
    PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0x00000001,
    PEER_MEMORY_FEATURE_COPY_DST_BIT = 0x00000002,
    PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0x00000004,
    PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0x00000008,
    PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
    PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
    PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
    PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
    PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkMemoryAllocateFlagBits {
    MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0x00000001,
    MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 0x00000002,
    MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000004,
    MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
    MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
    MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkExternalMemoryHandleTypeFlagBits {
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040,
    EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0x00000200,
    EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400,
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0x00000080,
    EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0x00000100,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
    EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkExternalMemoryFeatureFlagBits {
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001,
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002,
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004,
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
    EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkExternalFenceHandleTypeFlagBits {
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
    EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
    EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkExternalFenceFeatureFlagBits {
    EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001,
    EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002,
    EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
    EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
    EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkFenceImportFlagBits {
    FENCE_IMPORT_TEMPORARY_BIT = 0x00000001,
    FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,
    FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSemaphoreImportFlagBits {
    SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001,
    SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
    SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkExternalSemaphoreHandleTypeFlagBits {
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
    EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkExternalSemaphoreFeatureFlagBits {
    EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001,
    EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002,
    EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
    EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
    EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDriverId {
    DRIVER_ID_AMD_PROPRIETARY = 1,
    DRIVER_ID_AMD_OPEN_SOURCE = 2,
    DRIVER_ID_MESA_RADV = 3,
    DRIVER_ID_NVIDIA_PROPRIETARY = 4,
    DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
    DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
    DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
    DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
    DRIVER_ID_ARM_PROPRIETARY = 9,
    DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
    DRIVER_ID_GGP_PROPRIETARY = 11,
    DRIVER_ID_BROADCOM_PROPRIETARY = 12,
    DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY,
    DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE,
    DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV,
    DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY,
    DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
    DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
    DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
    DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
    DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY,
    DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
    DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY,
    DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY,
    DRIVER_ID_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkShaderFloatControlsIndependence {
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
    SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSamplerReductionMode {
    SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
    SAMPLER_REDUCTION_MODE_MIN = 1,
    SAMPLER_REDUCTION_MODE_MAX = 2,
    SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
    SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN,
    SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX,
    SAMPLER_REDUCTION_MODE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSemaphoreType {
    SEMAPHORE_TYPE_BINARY = 0,
    SEMAPHORE_TYPE_TIMELINE = 1,
    SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY,
    SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,
    SEMAPHORE_TYPE_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkResolveModeFlagBits {
    RESOLVE_MODE_NONE = 0,
    RESOLVE_MODE_SAMPLE_ZERO_BIT = 0x00000001,
    RESOLVE_MODE_AVERAGE_BIT = 0x00000002,
    RESOLVE_MODE_MIN_BIT = 0x00000004,
    RESOLVE_MODE_MAX_BIT = 0x00000008,
    RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE,
    RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
    RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT,
    RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT,
    RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT,
    RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDescriptorBindingFlagBits {
    DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 0x00000001,
    DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 0x00000002,
    DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 0x00000004,
    DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 0x00000008,
    DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
    DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
    DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
    DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
    DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSemaphoreWaitFlagBits {
    SEMAPHORE_WAIT_ANY_BIT = 0x00000001,
    SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT,
    SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPresentModeKHR {
    PRESENT_MODE_IMMEDIATE_KHR = 0,
    PRESENT_MODE_MAILBOX_KHR = 1,
    PRESENT_MODE_FIFO_KHR = 2,
    PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkColorSpaceKHR {
    COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
    COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
    COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
    COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
    COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
    COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
    COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
    COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
    COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
    COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
    COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
    COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
    COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
    COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
    COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
    COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSurfaceTransformFlagBitsKHR {
    SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001,
    SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002,
    SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004,
    SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008,
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
    SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
    SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100,
    SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCompositeAlphaFlagBitsKHR {
    COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
    COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002,
    COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
    COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008,
    COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSwapchainCreateFlagBitsKHR {
    SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001,
    SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0x00000002,
    SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0x00000004,
    SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDeviceGroupPresentModeFlagBitsKHR {
    DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0x00000001,
    DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0x00000002,
    DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0x00000004,
    DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008,
    DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDisplayPlaneAlphaFlagBitsKHR {
    DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
    DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002,
    DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004,
    DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
    DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPerformanceCounterUnitKHR {
    PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
    PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
    PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
    PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
    PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
    PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
    PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
    PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
    PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
    PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
    PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
    PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPerformanceCounterScopeKHR {
    PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
    PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
    PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
    QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
    QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
    QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
    PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPerformanceCounterStorageKHR {
    PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
    PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
    PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
    PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
    PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
    PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
    PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPerformanceCounterDescriptionFlagBitsKHR {
    PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 0x00000001,
    PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 0x00000002,
    PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkAcquireProfilingLockFlagBitsKHR {
    ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPipelineExecutableStatisticFormatKHR {
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
    PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDebugReportObjectTypeEXT {
    DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000165000,
    DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
    DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
    DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
    DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
    DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT,
    DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDebugReportFlagBitsEXT {
    DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001,
    DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002,
    DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
    DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008,
    DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010,
    DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkRasterizationOrderAMD {
    RASTERIZATION_ORDER_STRICT_AMD = 0,
    RASTERIZATION_ORDER_RELAXED_AMD = 1,
    RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkShaderInfoTypeAMD {
    SHADER_INFO_TYPE_STATISTICS_AMD = 0,
    SHADER_INFO_TYPE_BINARY_AMD = 1,
    SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkExternalMemoryHandleTypeFlagBitsNV {
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001,
    EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004,
    EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008,
    EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkExternalMemoryFeatureFlagBitsNV {
    EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001,
    EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002,
    EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004,
    EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkValidationCheckEXT {
    VALIDATION_CHECK_ALL_EXT = 0,
    VALIDATION_CHECK_SHADERS_EXT = 1,
    VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkConditionalRenderingFlagBitsEXT {
    CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001,
    CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkSurfaceCounterFlagBitsEXT {
    SURFACE_COUNTER_VBLANK_EXT = 0x00000001,
    SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDisplayPowerStateEXT {
    DISPLAY_POWER_STATE_OFF_EXT = 0,
    DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
    DISPLAY_POWER_STATE_ON_EXT = 2,
    DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDeviceEventTypeEXT {
    DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDisplayEventTypeEXT {
    DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkViewportCoordinateSwizzleNV {
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDiscardRectangleModeEXT {
    DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkConservativeRasterizationModeEXT {
    CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
    CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
    CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDebugUtilsMessageSeverityFlagBitsEXT {
    DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001,
    DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010,
    DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100,
    DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000,
    DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDebugUtilsMessageTypeFlagBitsEXT {
    DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001,
    DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002,
    DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004,
    DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkBlendOverlapEXT {
    BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    BLEND_OVERLAP_DISJOINT_EXT = 1,
    BLEND_OVERLAP_CONJOINT_EXT = 2,
    BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCoverageModulationModeNV {
    COVERAGE_MODULATION_MODE_NONE_NV = 0,
    COVERAGE_MODULATION_MODE_RGB_NV = 1,
    COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
    COVERAGE_MODULATION_MODE_RGBA_NV = 3,
    COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkValidationCacheHeaderVersionEXT {
    VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
    VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkShadingRatePaletteEntryNV {
    SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
    SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
    SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
    SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
    SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
    SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCoarseSampleOrderTypeNV {
    COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
    COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
    COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
    COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
    COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkRayTracingShaderGroupTypeKHR {
    RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
    RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
    RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
    RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
    RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
    RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
    RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkGeometryTypeKHR {
    GEOMETRY_TYPE_TRIANGLES_KHR = 0,
    GEOMETRY_TYPE_AABBS_KHR = 1,
    GEOMETRY_TYPE_INSTANCES_KHR = 1000150000,
    GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR,
    GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR,
    GEOMETRY_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkAccelerationStructureTypeKHR {
    ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
    ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
    ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
    ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
    ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCopyAccelerationStructureModeKHR {
    COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
    COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
    COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
    COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
    COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
    COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
    COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkAccelerationStructureMemoryRequirementsTypeKHR {
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR = 0,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR = 1,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = 2,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR,
    ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkGeometryFlagBitsKHR {
    GEOMETRY_OPAQUE_BIT_KHR = 0x00000001,
    GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0x00000002,
    GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR,
    GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
    GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkGeometryInstanceFlagBitsKHR {
    GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x00000001,
    GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 0x00000002,
    GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 0x00000004,
    GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 0x00000008,
    GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
    GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
    GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
    GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
    GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkBuildAccelerationStructureFlagBitsKHR {
    BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 0x00000001,
    BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 0x00000002,
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0x00000004,
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0x00000008,
    BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 0x00000010,
    BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
    BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
    BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
    BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
    BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkQueueGlobalPriorityEXT {
    QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
    QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
    QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
    QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
    QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPipelineCompilerControlFlagBitsAMD {
    PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkTimeDomainEXT {
    TIME_DOMAIN_DEVICE_EXT = 0,
    TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
    TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
    TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
    TIME_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkMemoryOverallocationBehaviorAMD {
    MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
    MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
    MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
    MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPipelineCreationFeedbackFlagBitsEXT {
    PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 0x00000001,
    PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 0x00000002,
    PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 0x00000004,
    PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPerformanceConfigurationTypeINTEL {
    PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
    PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkQueryPoolSamplingModeINTEL {
    QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
    QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPerformanceOverrideTypeINTEL {
    PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
    PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
    PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPerformanceParameterTypeINTEL {
    PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
    PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
    PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPerformanceValueTypeINTEL {
    PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
    PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
    PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
    PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
    PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
    PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkShaderCorePropertiesFlagBitsAMD {
    SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkToolPurposeFlagBitsEXT {
    TOOL_PURPOSE_VALIDATION_BIT_EXT = 0x00000001,
    TOOL_PURPOSE_PROFILING_BIT_EXT = 0x00000002,
    TOOL_PURPOSE_TRACING_BIT_EXT = 0x00000004,
    TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 0x00000008,
    TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 0x00000010,
    TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 0x00000020,
    TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 0x00000040,
    TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkValidationFeatureEnableEXT {
    VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
    VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
    VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
    VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkValidationFeatureDisableEXT {
    VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
    VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
    VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
    VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
    VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
    VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
    VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkComponentTypeNV {
    COMPONENT_TYPE_FLOAT16_NV = 0,
    COMPONENT_TYPE_FLOAT32_NV = 1,
    COMPONENT_TYPE_FLOAT64_NV = 2,
    COMPONENT_TYPE_SINT8_NV = 3,
    COMPONENT_TYPE_SINT16_NV = 4,
    COMPONENT_TYPE_SINT32_NV = 5,
    COMPONENT_TYPE_SINT64_NV = 6,
    COMPONENT_TYPE_UINT8_NV = 7,
    COMPONENT_TYPE_UINT16_NV = 8,
    COMPONENT_TYPE_UINT32_NV = 9,
    COMPONENT_TYPE_UINT64_NV = 10,
    COMPONENT_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkScopeNV {
    SCOPE_DEVICE_NV = 1,
    SCOPE_WORKGROUP_NV = 2,
    SCOPE_SUBGROUP_NV = 3,
    SCOPE_QUEUE_FAMILY_NV = 5,
    SCOPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkCoverageReductionModeNV {
    COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
    COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
    COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkLineRasterizationModeEXT {
    LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
    LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
    LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
    LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
    LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkIndirectCommandsTokenTypeNV {
    INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
    INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
    INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
    INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
    INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
    INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
    INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkIndirectStateFlagBitsNV {
    INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0x00000001,
    INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkIndirectCommandsLayoutUsageFlagBitsNV {
    INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0x00000001,
    INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 0x00000002,
    INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0x00000004,
    INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkPrivateDataSlotCreateFlagBitsEXT {
    PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF,
}
#[derive(Clone, Copy, Eq, PartialEq)]
pub enum VkDeviceDiagnosticsConfigFlagBitsNV {
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 0x00000001,
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 0x00000002,
    DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0x00000004,
    DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkApplicationInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    pApplicationName: const char*,
    applicationVersion: u32,
    pEngineName: const char*,
    engineVersion: u32,
    apiVersion: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkInstanceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkInstanceCreateFlags,
    pApplicationInfo: const VkApplicationInfo*,
    enabledLayerCount: u32,
    ppEnabledLayerNames: const char* const*,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: const char* const*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAllocationCallbacks {
    pUserData: *mut c_void,
    pfnAllocation: PFN_vkAllocationFunction,
    pfnReallocation: PFN_vkReallocationFunction,
    pfnFree: PFN_vkFreeFunction,
    pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pfnInternalFree: PFN_vkInternalFreeNotification,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceFeatures {
    robustBufferAccess: VkBool32,
    fullDrawIndexUint32: VkBool32,
    imageCubeArray: VkBool32,
    independentBlend: VkBool32,
    geometryShader: VkBool32,
    tessellationShader: VkBool32,
    sampleRateShading: VkBool32,
    dualSrcBlend: VkBool32,
    logicOp: VkBool32,
    multiDrawIndirect: VkBool32,
    drawIndirectFirstInstance: VkBool32,
    depthClamp: VkBool32,
    depthBiasClamp: VkBool32,
    fillModeNonSolid: VkBool32,
    depthBounds: VkBool32,
    wideLines: VkBool32,
    largePoints: VkBool32,
    alphaToOne: VkBool32,
    multiViewport: VkBool32,
    samplerAnisotropy: VkBool32,
    textureCompressionETC2: VkBool32,
    LDR: VkBool32    textureCompressionASTC_,
    textureCompressionBC: VkBool32,
    occlusionQueryPrecise: VkBool32,
    pipelineStatisticsQuery: VkBool32,
    vertexPipelineStoresAndAtomics: VkBool32,
    fragmentStoresAndAtomics: VkBool32,
    shaderTessellationAndGeometryPointSize: VkBool32,
    shaderImageGatherExtended: VkBool32,
    shaderStorageImageExtendedFormats: VkBool32,
    shaderStorageImageMultisample: VkBool32,
    shaderStorageImageReadWithoutFormat: VkBool32,
    shaderStorageImageWriteWithoutFormat: VkBool32,
    shaderUniformBufferArrayDynamicIndexing: VkBool32,
    shaderSampledImageArrayDynamicIndexing: VkBool32,
    shaderStorageBufferArrayDynamicIndexing: VkBool32,
    shaderStorageImageArrayDynamicIndexing: VkBool32,
    shaderClipDistance: VkBool32,
    shaderCullDistance: VkBool32,
    shaderFloat64: VkBool32,
    shaderInt64: VkBool32,
    shaderInt16: VkBool32,
    shaderResourceResidency: VkBool32,
    shaderResourceMinLod: VkBool32,
    sparseBinding: VkBool32,
    sparseResidencyBuffer: VkBool32,
    sparseResidencyImage2D: VkBool32,
    sparseResidencyImage3D: VkBool32,
    sparseResidency2Samples: VkBool32,
    sparseResidency4Samples: VkBool32,
    sparseResidency8Samples: VkBool32,
    sparseResidency16Samples: VkBool32,
    sparseResidencyAliased: VkBool32,
    variableMultisampleRate: VkBool32,
    inheritedQueries: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkFormatProperties {
    linearTilingFeatures: VkFormatFeatureFlags,
    optimalTilingFeatures: VkFormatFeatureFlags,
    bufferFeatures: VkFormatFeatureFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExtent3D {
    width: u32,
    height: u32,
    depth: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageFormatProperties {
    maxExtent: VkExtent3D,
    maxMipLevels: u32,
    maxArrayLayers: u32,
    sampleCounts: VkSampleCountFlags,
    maxResourceSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceLimits {
    maxImageDimension1D: u32,
    maxImageDimension2D: u32,
    maxImageDimension3D: u32,
    maxImageDimensionCube: u32,
    maxImageArrayLayers: u32,
    maxTexelBufferElements: u32,
    maxUniformBufferRange: u32,
    maxStorageBufferRange: u32,
    maxPushConstantsSize: u32,
    maxMemoryAllocationCount: u32,
    maxSamplerAllocationCount: u32,
    bufferImageGranularity: VkDeviceSize,
    sparseAddressSpaceSize: VkDeviceSize,
    maxBoundDescriptorSets: u32,
    maxPerStageDescriptorSamplers: u32,
    maxPerStageDescriptorUniformBuffers: u32,
    maxPerStageDescriptorStorageBuffers: u32,
    maxPerStageDescriptorSampledImages: u32,
    maxPerStageDescriptorStorageImages: u32,
    maxPerStageDescriptorInputAttachments: u32,
    maxPerStageResources: u32,
    maxDescriptorSetSamplers: u32,
    maxDescriptorSetUniformBuffers: u32,
    maxDescriptorSetUniformBuffersDynamic: u32,
    maxDescriptorSetStorageBuffers: u32,
    maxDescriptorSetStorageBuffersDynamic: u32,
    maxDescriptorSetSampledImages: u32,
    maxDescriptorSetStorageImages: u32,
    maxDescriptorSetInputAttachments: u32,
    maxVertexInputAttributes: u32,
    maxVertexInputBindings: u32,
    maxVertexInputAttributeOffset: u32,
    maxVertexInputBindingStride: u32,
    maxVertexOutputComponents: u32,
    maxTessellationGenerationLevel: u32,
    maxTessellationPatchSize: u32,
    maxTessellationControlPerVertexInputComponents: u32,
    maxTessellationControlPerVertexOutputComponents: u32,
    maxTessellationControlPerPatchOutputComponents: u32,
    maxTessellationControlTotalOutputComponents: u32,
    maxTessellationEvaluationInputComponents: u32,
    maxTessellationEvaluationOutputComponents: u32,
    maxGeometryShaderInvocations: u32,
    maxGeometryInputComponents: u32,
    maxGeometryOutputComponents: u32,
    maxGeometryOutputVertices: u32,
    maxGeometryTotalOutputComponents: u32,
    maxFragmentInputComponents: u32,
    maxFragmentOutputAttachments: u32,
    maxFragmentDualSrcAttachments: u32,
    maxFragmentCombinedOutputResources: u32,
    maxComputeSharedMemorySize: u32,
    maxComputeWorkGroupCount: u32,
    maxComputeWorkGroupInvocations: u32,
    maxComputeWorkGroupSize: u32,
    subPixelPrecisionBits: u32,
    subTexelPrecisionBits: u32,
    mipmapPrecisionBits: u32,
    maxDrawIndexedIndexValue: u32,
    maxDrawIndirectCount: u32,
    maxSamplerLodBias: f32,
    maxSamplerAnisotropy: f32,
    maxViewports: u32,
    maxViewportDimensions: u32,
    viewportBoundsRange: f32,
    viewportSubPixelBits: u32,
    minMemoryMapAlignment: size_t,
    minTexelBufferOffsetAlignment: VkDeviceSize,
    minUniformBufferOffsetAlignment: VkDeviceSize,
    minStorageBufferOffsetAlignment: VkDeviceSize,
    minTexelOffset: i32,
    maxTexelOffset: u32,
    minTexelGatherOffset: i32,
    maxTexelGatherOffset: u32,
    minInterpolationOffset: f32,
    maxInterpolationOffset: f32,
    subPixelInterpolationOffsetBits: u32,
    maxFramebufferWidth: u32,
    maxFramebufferHeight: u32,
    maxFramebufferLayers: u32,
    framebufferColorSampleCounts: VkSampleCountFlags,
    framebufferDepthSampleCounts: VkSampleCountFlags,
    framebufferStencilSampleCounts: VkSampleCountFlags,
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    maxColorAttachments: u32,
    sampledImageColorSampleCounts: VkSampleCountFlags,
    sampledImageIntegerSampleCounts: VkSampleCountFlags,
    sampledImageDepthSampleCounts: VkSampleCountFlags,
    sampledImageStencilSampleCounts: VkSampleCountFlags,
    storageImageSampleCounts: VkSampleCountFlags,
    maxSampleMaskWords: u32,
    timestampComputeAndGraphics: VkBool32,
    timestampPeriod: f32,
    maxClipDistances: u32,
    maxCullDistances: u32,
    maxCombinedClipAndCullDistances: u32,
    discreteQueuePriorities: u32,
    pointSizeRange: f32,
    lineWidthRange: f32,
    pointSizeGranularity: f32,
    lineWidthGranularity: f32,
    strictLines: VkBool32,
    standardSampleLocations: VkBool32,
    optimalBufferCopyOffsetAlignment: VkDeviceSize,
    optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    nonCoherentAtomSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSparseProperties {
    residencyStandard2DBlockShape: VkBool32,
    residencyStandard2DMultisampleBlockShape: VkBool32,
    residencyStandard3DBlockShape: VkBool32,
    residencyAlignedMipSize: VkBool32,
    residencyNonResidentStrict: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceProperties {
    apiVersion: u32,
    driverVersion: u32,
    vendorID: u32,
    deviceID: u32,
    deviceType: VkPhysicalDeviceType,
    SIZE: VK_MAX_PHYSICAL_DEVICE_NAME_,
    SIZE: VK_UUID_,
    limits: VkPhysicalDeviceLimits,
    sparseProperties: VkPhysicalDeviceSparseProperties,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkQueueFamilyProperties {
    queueFlags: VkQueueFlags,
    queueCount: u32,
    timestampValidBits: u32,
    minImageTransferGranularity: VkExtent3D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryType {
    propertyFlags: VkMemoryPropertyFlags,
    heapIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryHeap {
    size: VkDeviceSize,
    flags: VkMemoryHeapFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMemoryProperties {
    memoryTypeCount: u32,
    TYPES: VK_MAX_MEMORY_,
    memoryHeapCount: u32,
    HEAPS: VK_MAX_MEMORY_,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceQueueCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueCount: u32,
    pQueuePriorities: const float*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDeviceCreateFlags,
    queueCreateInfoCount: u32,
    pQueueCreateInfos: const VkDeviceQueueCreateInfo*,
    enabledLayerCount: u32,
    ppEnabledLayerNames: const char* const*,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: const char* const*,
    pEnabledFeatures: const VkPhysicalDeviceFeatures*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExtensionProperties {
    SIZE: VK_MAX_EXTENSION_NAME_,
    specVersion: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkLayerProperties {
    SIZE: VK_MAX_EXTENSION_NAME_,
    specVersion: u32,
    implementationVersion: u32,
    SIZE: VK_MAX_DESCRIPTION_,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubmitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: const VkSemaphore*,
    pWaitDstStageMask: const VkPipelineStageFlags*,
    commandBufferCount: u32,
    pCommandBuffers: const VkCommandBuffer*,
    signalSemaphoreCount: u32,
    pSignalSemaphores: const VkSemaphore*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    allocationSize: VkDeviceSize,
    memoryTypeIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMappedMemoryRange {
    sType: VkStructureType,
    pNext: *const c_void,
    memory: VkDeviceMemory,
    offset: VkDeviceSize,
    size: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryRequirements {
    size: VkDeviceSize,
    alignment: VkDeviceSize,
    memoryTypeBits: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSparseImageFormatProperties {
    aspectMask: VkImageAspectFlags,
    imageGranularity: VkExtent3D,
    flags: VkSparseImageFormatFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSparseImageMemoryRequirements {
    formatProperties: VkSparseImageFormatProperties,
    imageMipTailFirstLod: u32,
    imageMipTailSize: VkDeviceSize,
    imageMipTailOffset: VkDeviceSize,
    imageMipTailStride: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSparseMemoryBind {
    resourceOffset: VkDeviceSize,
    size: VkDeviceSize,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSparseBufferMemoryBindInfo {
    buffer: VkBuffer,
    bindCount: u32,
    pBinds: const VkSparseMemoryBind*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSparseImageOpaqueMemoryBindInfo {
    image: VkImage,
    bindCount: u32,
    pBinds: const VkSparseMemoryBind*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageSubresource {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    arrayLayer: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkOffset3D {
    x: i32,
    y: i32,
    z: i32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSparseImageMemoryBind {
    subresource: VkImageSubresource,
    offset: VkOffset3D,
    extent: VkExtent3D,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSparseImageMemoryBindInfo {
    image: VkImage,
    bindCount: u32,
    pBinds: const VkSparseImageMemoryBind*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindSparseInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: const VkSemaphore*,
    bufferBindCount: u32,
    pBufferBinds: const VkSparseBufferMemoryBindInfo*,
    imageOpaqueBindCount: u32,
    pImageOpaqueBinds: const VkSparseImageOpaqueMemoryBindInfo*,
    imageBindCount: u32,
    pImageBinds: const VkSparseImageMemoryBindInfo*,
    signalSemaphoreCount: u32,
    pSignalSemaphores: const VkSemaphore*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkFenceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkFenceCreateFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSemaphoreCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSemaphoreCreateFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkEventCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkEventCreateFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkQueryPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkQueryPoolCreateFlags,
    queryType: VkQueryType,
    queryCount: u32,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBufferCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkBufferCreateFlags,
    size: VkDeviceSize,
    usage: VkBufferUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBufferViewCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkBufferViewCreateFlags,
    buffer: VkBuffer,
    format: VkFormat,
    offset: VkDeviceSize,
    range: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkImageCreateFlags,
    imageType: VkImageType,
    format: VkFormat,
    extent: VkExtent3D,
    mipLevels: u32,
    arrayLayers: u32,
    samples: VkSampleCountFlagBits,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: const uint32_t*,
    initialLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubresourceLayout {
    offset: VkDeviceSize,
    size: VkDeviceSize,
    rowPitch: VkDeviceSize,
    arrayPitch: VkDeviceSize,
    depthPitch: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkComponentMapping {
    r: VkComponentSwizzle,
    g: VkComponentSwizzle,
    b: VkComponentSwizzle,
    a: VkComponentSwizzle,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageSubresourceRange {
    aspectMask: VkImageAspectFlags,
    baseMipLevel: u32,
    levelCount: u32,
    baseArrayLayer: u32,
    layerCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageViewCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkImageViewCreateFlags,
    image: VkImage,
    viewType: VkImageViewType,
    format: VkFormat,
    components: VkComponentMapping,
    subresourceRange: VkImageSubresourceRange,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkShaderModuleCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkShaderModuleCreateFlags,
    codeSize: size_t,
    pCode: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineCacheCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCacheCreateFlags,
    initialDataSize: size_t,
    pInitialData: *const c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSpecializationMapEntry {
    constantID: u32,
    offset: u32,
    size: size_t,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSpecializationInfo {
    mapEntryCount: u32,
    pMapEntries: const VkSpecializationMapEntry*,
    dataSize: size_t,
    pData: *const c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineShaderStageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineShaderStageCreateFlags,
    stage: VkShaderStageFlagBits,
    module: VkShaderModule,
    pName: const char*,
    pSpecializationInfo: const VkSpecializationInfo*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkVertexInputBindingDescription {
    binding: u32,
    stride: u32,
    inputRate: VkVertexInputRate,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkVertexInputAttributeDescription {
    location: u32,
    binding: u32,
    format: VkFormat,
    offset: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineVertexInputStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineVertexInputStateCreateFlags,
    vertexBindingDescriptionCount: u32,
    pVertexBindingDescriptions: const VkVertexInputBindingDescription*,
    vertexAttributeDescriptionCount: u32,
    pVertexAttributeDescriptions: const VkVertexInputAttributeDescription*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineInputAssemblyStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineInputAssemblyStateCreateFlags,
    topology: VkPrimitiveTopology,
    primitiveRestartEnable: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineTessellationStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineTessellationStateCreateFlags,
    patchControlPoints: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkViewport {
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    minDepth: f32,
    maxDepth: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkOffset2D {
    x: i32,
    y: i32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExtent2D {
    width: u32,
    height: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRect2D {
    offset: VkOffset2D,
    extent: VkExtent2D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineViewportStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineViewportStateCreateFlags,
    viewportCount: u32,
    pViewports: const VkViewport*,
    scissorCount: u32,
    pScissors: const VkRect2D*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineRasterizationStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineRasterizationStateCreateFlags,
    depthClampEnable: VkBool32,
    rasterizerDiscardEnable: VkBool32,
    polygonMode: VkPolygonMode,
    cullMode: VkCullModeFlags,
    frontFace: VkFrontFace,
    depthBiasEnable: VkBool32,
    depthBiasConstantFactor: f32,
    depthBiasClamp: f32,
    depthBiasSlopeFactor: f32,
    lineWidth: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineMultisampleStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineMultisampleStateCreateFlags,
    rasterizationSamples: VkSampleCountFlagBits,
    sampleShadingEnable: VkBool32,
    minSampleShading: f32,
    pSampleMask: const VkSampleMask*,
    alphaToCoverageEnable: VkBool32,
    alphaToOneEnable: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkStencilOpState {
    failOp: VkStencilOp,
    passOp: VkStencilOp,
    depthFailOp: VkStencilOp,
    compareOp: VkCompareOp,
    compareMask: u32,
    writeMask: u32,
    reference: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineDepthStencilStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineDepthStencilStateCreateFlags,
    depthTestEnable: VkBool32,
    depthWriteEnable: VkBool32,
    depthCompareOp: VkCompareOp,
    depthBoundsTestEnable: VkBool32,
    stencilTestEnable: VkBool32,
    front: VkStencilOpState,
    back: VkStencilOpState,
    minDepthBounds: f32,
    maxDepthBounds: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineColorBlendAttachmentState {
    blendEnable: VkBool32,
    srcColorBlendFactor: VkBlendFactor,
    dstColorBlendFactor: VkBlendFactor,
    colorBlendOp: VkBlendOp,
    srcAlphaBlendFactor: VkBlendFactor,
    dstAlphaBlendFactor: VkBlendFactor,
    alphaBlendOp: VkBlendOp,
    colorWriteMask: VkColorComponentFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineColorBlendStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineColorBlendStateCreateFlags,
    logicOpEnable: VkBool32,
    logicOp: VkLogicOp,
    attachmentCount: u32,
    pAttachments: const VkPipelineColorBlendAttachmentState*,
    blendConstants: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineDynamicStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineDynamicStateCreateFlags,
    dynamicStateCount: u32,
    pDynamicStates: const VkDynamicState*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkGraphicsPipelineCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: const VkPipelineShaderStageCreateInfo*,
    pVertexInputState: const VkPipelineVertexInputStateCreateInfo*,
    pInputAssemblyState: const VkPipelineInputAssemblyStateCreateInfo*,
    pTessellationState: const VkPipelineTessellationStateCreateInfo*,
    pViewportState: const VkPipelineViewportStateCreateInfo*,
    pRasterizationState: const VkPipelineRasterizationStateCreateInfo*,
    pMultisampleState: const VkPipelineMultisampleStateCreateInfo*,
    pDepthStencilState: const VkPipelineDepthStencilStateCreateInfo*,
    pColorBlendState: const VkPipelineColorBlendStateCreateInfo*,
    pDynamicState: const VkPipelineDynamicStateCreateInfo*,
    layout: VkPipelineLayout,
    renderPass: VkRenderPass,
    subpass: u32,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkComputePipelineCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCreateFlags,
    stage: VkPipelineShaderStageCreateInfo,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPushConstantRange {
    stageFlags: VkShaderStageFlags,
    offset: u32,
    size: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineLayoutCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineLayoutCreateFlags,
    setLayoutCount: u32,
    pSetLayouts: const VkDescriptorSetLayout*,
    pushConstantRangeCount: u32,
    pPushConstantRanges: const VkPushConstantRange*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSamplerCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSamplerCreateFlags,
    magFilter: VkFilter,
    minFilter: VkFilter,
    mipmapMode: VkSamplerMipmapMode,
    addressModeU: VkSamplerAddressMode,
    addressModeV: VkSamplerAddressMode,
    addressModeW: VkSamplerAddressMode,
    mipLodBias: f32,
    anisotropyEnable: VkBool32,
    maxAnisotropy: f32,
    compareEnable: VkBool32,
    compareOp: VkCompareOp,
    minLod: f32,
    maxLod: f32,
    borderColor: VkBorderColor,
    unnormalizedCoordinates: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorSetLayoutBinding {
    binding: u32,
    descriptorType: VkDescriptorType,
    descriptorCount: u32,
    stageFlags: VkShaderStageFlags,
    pImmutableSamplers: const VkSampler*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorSetLayoutCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDescriptorSetLayoutCreateFlags,
    bindingCount: u32,
    pBindings: const VkDescriptorSetLayoutBinding*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorPoolSize {
    type: VkDescriptorType,
    descriptorCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDescriptorPoolCreateFlags,
    maxSets: u32,
    poolSizeCount: u32,
    pPoolSizes: const VkDescriptorPoolSize*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorSetAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    descriptorPool: VkDescriptorPool,
    descriptorSetCount: u32,
    pSetLayouts: const VkDescriptorSetLayout*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorImageInfo {
    sampler: VkSampler,
    imageView: VkImageView,
    imageLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorBufferInfo {
    buffer: VkBuffer,
    offset: VkDeviceSize,
    range: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkWriteDescriptorSet {
    sType: VkStructureType,
    pNext: *const c_void,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    pImageInfo: const VkDescriptorImageInfo*,
    pBufferInfo: const VkDescriptorBufferInfo*,
    pTexelBufferView: const VkBufferView*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCopyDescriptorSet {
    sType: VkStructureType,
    pNext: *const c_void,
    srcSet: VkDescriptorSet,
    srcBinding: u32,
    srcArrayElement: u32,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkFramebufferCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkFramebufferCreateFlags,
    renderPass: VkRenderPass,
    attachmentCount: u32,
    pAttachments: const VkImageView*,
    width: u32,
    height: u32,
    layers: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAttachmentDescription {
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAttachmentReference {
    attachment: u32,
    layout: VkImageLayout,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubpassDescription {
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    inputAttachmentCount: u32,
    pInputAttachments: const VkAttachmentReference*,
    colorAttachmentCount: u32,
    pColorAttachments: const VkAttachmentReference*,
    pResolveAttachments: const VkAttachmentReference*,
    pDepthStencilAttachment: const VkAttachmentReference*,
    preserveAttachmentCount: u32,
    pPreserveAttachments: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubpassDependency {
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRenderPassCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: const VkAttachmentDescription*,
    subpassCount: u32,
    pSubpasses: const VkSubpassDescription*,
    dependencyCount: u32,
    pDependencies: const VkSubpassDependency*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCommandPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkCommandPoolCreateFlags,
    queueFamilyIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCommandBufferAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    commandPool: VkCommandPool,
    level: VkCommandBufferLevel,
    commandBufferCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCommandBufferInheritanceInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    renderPass: VkRenderPass,
    subpass: u32,
    framebuffer: VkFramebuffer,
    occlusionQueryEnable: VkBool32,
    queryFlags: VkQueryControlFlags,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCommandBufferBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkCommandBufferUsageFlags,
    pInheritanceInfo: const VkCommandBufferInheritanceInfo*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBufferCopy {
    srcOffset: VkDeviceSize,
    dstOffset: VkDeviceSize,
    size: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageSubresourceLayers {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    baseArrayLayer: u32,
    layerCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageCopy {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageBlit {
    srcSubresource: VkImageSubresourceLayers,
    srcOffsets: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffsets: VkOffset3D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBufferImageCopy {
    bufferOffset: VkDeviceSize,
    bufferRowLength: u32,
    bufferImageHeight: u32,
    imageSubresource: VkImageSubresourceLayers,
    imageOffset: VkOffset3D,
    imageExtent: VkExtent3D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkClearDepthStencilValue {
    depth: f32,
    stencil: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkClearAttachment {
    aspectMask: VkImageAspectFlags,
    colorAttachment: u32,
    clearValue: VkClearValue,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkClearRect {
    rect: VkRect2D,
    baseArrayLayer: u32,
    layerCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageResolve {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryBarrier {
    sType: VkStructureType,
    pNext: *const c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBufferMemoryBarrier {
    sType: VkStructureType,
    pNext: *const c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    size: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageMemoryBarrier {
    sType: VkStructureType,
    pNext: *const c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    oldLayout: VkImageLayout,
    newLayout: VkImageLayout,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    image: VkImage,
    subresourceRange: VkImageSubresourceRange,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRenderPassBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    renderPass: VkRenderPass,
    framebuffer: VkFramebuffer,
    renderArea: VkRect2D,
    clearValueCount: u32,
    pClearValues: const VkClearValue*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDispatchIndirectCommand {
    x: u32,
    y: u32,
    z: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDrawIndexedIndirectCommand {
    indexCount: u32,
    instanceCount: u32,
    firstIndex: u32,
    vertexOffset: i32,
    firstInstance: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDrawIndirectCommand {
    vertexCount: u32,
    instanceCount: u32,
    firstVertex: u32,
    firstInstance: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBaseOutStructure {
    sType: VkStructureType,
    pNext: *mut VkBaseOutStructure,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBaseInStructure {
    sType: VkStructureType,
    pNext: *const VkBaseInStructure,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSubgroupProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    subgroupSize: u32,
    supportedStages: VkShaderStageFlags,
    supportedOperations: VkSubgroupFeatureFlags,
    quadOperationsInAllStages: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindBufferMemoryInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    buffer: VkBuffer,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindImageMemoryInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevice16BitStorageFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryDedicatedRequirements {
    sType: VkStructureType,
    pNext: *mut c_void,
    prefersDedicatedAllocation: VkBool32,
    requiresDedicatedAllocation: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryDedicatedAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
    buffer: VkBuffer,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryAllocateFlagsInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkMemoryAllocateFlags,
    deviceMask: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceMask: u32,
    deviceRenderAreaCount: u32,
    pDeviceRenderAreas: const VkRect2D*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceGroupCommandBufferBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceMask: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceGroupSubmitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphoreDeviceIndices: const uint32_t*,
    commandBufferCount: u32,
    pCommandBufferDeviceMasks: const uint32_t*,
    signalSemaphoreCount: u32,
    pSignalSemaphoreDeviceIndices: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceGroupBindSparseInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    resourceDeviceIndex: u32,
    memoryDeviceIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindBufferMemoryDeviceGroupInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceIndexCount: u32,
    pDeviceIndices: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindImageMemoryDeviceGroupInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceIndexCount: u32,
    pDeviceIndices: const uint32_t*,
    splitInstanceBindRegionCount: u32,
    pSplitInstanceBindRegions: const VkRect2D*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceGroupProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    physicalDeviceCount: u32,
    SIZE: VK_MAX_DEVICE_GROUP_,
    subsetAllocation: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceGroupDeviceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    physicalDeviceCount: u32,
    pPhysicalDevices: const VkPhysicalDevice*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBufferMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    buffer: VkBuffer,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageSparseMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryRequirements2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryRequirements: VkMemoryRequirements,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSparseImageMemoryRequirements2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryRequirements: VkSparseImageMemoryRequirements,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceFeatures2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    features: VkPhysicalDeviceFeatures,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    properties: VkPhysicalDeviceProperties,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    formatProperties: VkFormatProperties,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    imageFormatProperties: VkImageFormatProperties,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    format: VkFormat,
    type: VkImageType,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    flags: VkImageCreateFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkQueueFamilyProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    queueFamilyProperties: VkQueueFamilyProperties,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMemoryProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryProperties: VkPhysicalDeviceMemoryProperties,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSparseImageFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut c_void,
    properties: VkSparseImageFormatProperties,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    format: VkFormat,
    type: VkImageType,
    samples: VkSampleCountFlagBits,
    usage: VkImageUsageFlags,
    tiling: VkImageTiling,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevicePointClippingProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    pointClippingBehavior: VkPointClippingBehavior,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkInputAttachmentAspectReference {
    subpass: u32,
    inputAttachmentIndex: u32,
    aspectMask: VkImageAspectFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    aspectReferenceCount: u32,
    pAspectReferences: const VkInputAttachmentAspectReference*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageViewUsageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    usage: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    domainOrigin: VkTessellationDomainOrigin,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRenderPassMultiviewCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    subpassCount: u32,
    pViewMasks: const uint32_t*,
    dependencyCount: u32,
    pViewOffsets: const int32_t*,
    correlationMaskCount: u32,
    pCorrelationMasks: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMultiviewProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceVariablePointersFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    protectedMemory: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceProtectedMemoryProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    protectedNoFault: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceQueueInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkProtectedSubmitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    protectedSubmit: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    format: VkFormat,
    ycbcrModel: VkSamplerYcbcrModelConversion,
    ycbcrRange: VkSamplerYcbcrRange,
    components: VkComponentMapping,
    xChromaOffset: VkChromaLocation,
    yChromaOffset: VkChromaLocation,
    chromaFilter: VkFilter,
    forceExplicitReconstruction: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSamplerYcbcrConversionInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    conversion: VkSamplerYcbcrConversion,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindImagePlaneMemoryInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    planeAspect: VkImageAspectFlagBits,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    planeAspect: VkImageAspectFlagBits,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    samplerYcbcrConversion: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSamplerYcbcrConversionImageFormatProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    combinedImageSamplerDescriptorCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorUpdateTemplateEntry {
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    offset: size_t,
    stride: size_t,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDescriptorUpdateTemplateCreateFlags,
    descriptorUpdateEntryCount: u32,
    pDescriptorUpdateEntries: const VkDescriptorUpdateTemplateEntry*,
    templateType: VkDescriptorUpdateTemplateType,
    descriptorSetLayout: VkDescriptorSetLayout,
    pipelineBindPoint: VkPipelineBindPoint,
    pipelineLayout: VkPipelineLayout,
    set: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExternalMemoryProperties {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceExternalImageFormatInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExternalImageFormatProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkBufferCreateFlags,
    usage: VkBufferUsageFlags,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExternalBufferProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceIDProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    SIZE: VK_UUID_,
    SIZE: VK_UUID_,
    SIZE: VK_LUID_,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExternalMemoryImageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExternalMemoryBufferCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExportMemoryAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceExternalFenceInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalFenceHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExternalFenceProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    externalFenceFeatures: VkExternalFenceFeatureFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExportFenceCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalFenceHandleTypeFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExportSemaphoreCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalSemaphoreHandleTypeFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExternalSemaphoreProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMaintenance3Properties {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorSetLayoutSupport {
    sType: VkStructureType,
    pNext: *mut c_void,
    supported: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderDrawParameters: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceVulkan11Features {
    sType: VkStructureType,
    pNext: *mut c_void,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
    protectedMemory: VkBool32,
    samplerYcbcrConversion: VkBool32,
    shaderDrawParameters: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceVulkan11Properties {
    sType: VkStructureType,
    pNext: *mut c_void,
    SIZE: VK_UUID_,
    SIZE: VK_UUID_,
    SIZE: VK_LUID_,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
    subgroupSize: u32,
    subgroupSupportedStages: VkShaderStageFlags,
    subgroupSupportedOperations: VkSubgroupFeatureFlags,
    subgroupQuadOperationsInAllStages: VkBool32,
    pointClippingBehavior: VkPointClippingBehavior,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
    protectedNoFault: VkBool32,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceVulkan12Features {
    sType: VkStructureType,
    pNext: *mut c_void,
    samplerMirrorClampToEdge: VkBool32,
    drawIndirectCount: VkBool32,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
    descriptorIndexing: VkBool32,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
    samplerFilterMinmax: VkBool32,
    scalarBlockLayout: VkBool32,
    imagelessFramebuffer: VkBool32,
    uniformBufferStandardLayout: VkBool32,
    shaderSubgroupExtendedTypes: VkBool32,
    separateDepthStencilLayouts: VkBool32,
    hostQueryReset: VkBool32,
    timelineSemaphore: VkBool32,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
    shaderOutputViewportIndex: VkBool32,
    shaderOutputLayer: VkBool32,
    subgroupBroadcastDynamicId: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkConformanceVersion {
    major: u8,
    minor: u8,
    subminor: u8,
    patch: u8,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceVulkan12Properties {
    sType: VkStructureType,
    pNext: *mut c_void,
    driverID: VkDriverId,
    SIZE: VK_MAX_DRIVER_NAME_,
    SIZE: VK_MAX_DRIVER_INFO_,
    conformanceVersion: VkConformanceVersion,
    denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    roundingModeIndependence: VkShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
    supportedDepthResolveModes: VkResolveModeFlags,
    supportedStencilResolveModes: VkResolveModeFlags,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
    maxTimelineSemaphoreValueDifference: u64,
    framebufferIntegerColorSampleCounts: VkSampleCountFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageFormatListCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    viewFormatCount: u32,
    pViewFormats: const VkFormat*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAttachmentDescription2 {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAttachmentReference2 {
    sType: VkStructureType,
    pNext: *const c_void,
    attachment: u32,
    layout: VkImageLayout,
    aspectMask: VkImageAspectFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubpassDescription2 {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    viewMask: u32,
    inputAttachmentCount: u32,
    pInputAttachments: const VkAttachmentReference2*,
    colorAttachmentCount: u32,
    pColorAttachments: const VkAttachmentReference2*,
    pResolveAttachments: const VkAttachmentReference2*,
    pDepthStencilAttachment: const VkAttachmentReference2*,
    preserveAttachmentCount: u32,
    pPreserveAttachments: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubpassDependency2 {
    sType: VkStructureType,
    pNext: *const c_void,
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
    viewOffset: i32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRenderPassCreateInfo2 {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: const VkAttachmentDescription2*,
    subpassCount: u32,
    pSubpasses: const VkSubpassDescription2*,
    dependencyCount: u32,
    pDependencies: const VkSubpassDependency2*,
    correlatedViewMaskCount: u32,
    pCorrelatedViewMasks: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubpassBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    contents: VkSubpassContents,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubpassEndInfo {
    sType: VkStructureType,
    pNext: *const c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevice8BitStorageFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDriverProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    driverID: VkDriverId,
    SIZE: VK_MAX_DRIVER_NAME_,
    SIZE: VK_MAX_DRIVER_INFO_,
    conformanceVersion: VkConformanceVersion,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderAtomicInt64Features {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderFloat16Int8Features {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceFloatControlsProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    roundingModeIndependence: VkShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    bindingCount: u32,
    pBindingFlags: const VkDescriptorBindingFlags*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDescriptorIndexingFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDescriptorIndexingProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    descriptorSetCount: u32,
    pDescriptorCounts: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxVariableDescriptorCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubpassDescriptionDepthStencilResolve {
    sType: VkStructureType,
    pNext: *const c_void,
    depthResolveMode: VkResolveModeFlagBits,
    stencilResolveMode: VkResolveModeFlagBits,
    pDepthStencilResolveAttachment: const VkAttachmentReference2*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDepthStencilResolveProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    supportedDepthResolveModes: VkResolveModeFlags,
    supportedStencilResolveModes: VkResolveModeFlags,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    scalarBlockLayout: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageStencilUsageCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    stencilUsage: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSamplerReductionModeCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    reductionMode: VkSamplerReductionMode,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceImagelessFramebufferFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    imagelessFramebuffer: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkFramebufferAttachmentImageInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkImageCreateFlags,
    usage: VkImageUsageFlags,
    width: u32,
    height: u32,
    layerCount: u32,
    viewFormatCount: u32,
    pViewFormats: const VkFormat*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkFramebufferAttachmentsCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    attachmentImageInfoCount: u32,
    pAttachmentImageInfos: const VkFramebufferAttachmentImageInfo*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRenderPassAttachmentBeginInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    attachmentCount: u32,
    pAttachments: const VkImageView*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    uniformBufferStandardLayout: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderSubgroupExtendedTypes: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    separateDepthStencilLayouts: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAttachmentReferenceStencilLayout {
    sType: VkStructureType,
    pNext: *mut c_void,
    stencilLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAttachmentDescriptionStencilLayout {
    sType: VkStructureType,
    pNext: *mut c_void,
    stencilInitialLayout: VkImageLayout,
    stencilFinalLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceHostQueryResetFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    hostQueryReset: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    timelineSemaphore: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceTimelineSemaphoreProperties {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxTimelineSemaphoreValueDifference: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSemaphoreTypeCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphoreType: VkSemaphoreType,
    initialValue: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkTimelineSemaphoreSubmitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreValueCount: u32,
    pWaitSemaphoreValues: const uint64_t*,
    signalSemaphoreValueCount: u32,
    pSignalSemaphoreValues: const uint64_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSemaphoreWaitInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSemaphoreWaitFlags,
    semaphoreCount: u32,
    pSemaphores: const VkSemaphore*,
    pValues: const uint64_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSemaphoreSignalInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphore: VkSemaphore,
    value: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    sType: VkStructureType,
    pNext: *mut c_void,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBufferDeviceAddressInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    buffer: VkBuffer,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBufferOpaqueCaptureAddressCreateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    opaqueCaptureAddress: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    opaqueCaptureAddress: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    sType: VkStructureType,
    pNext: *const c_void,
    memory: VkDeviceMemory,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSurfaceCapabilitiesKHR {
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSurfaceFormatKHR {
    format: VkFormat,
    colorSpace: VkColorSpaceKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSwapchainCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkSwapchainCreateFlagsKHR,
    surface: VkSurfaceKHR,
    minImageCount: u32,
    imageFormat: VkFormat,
    imageColorSpace: VkColorSpaceKHR,
    imageExtent: VkExtent2D,
    imageArrayLayers: u32,
    imageUsage: VkImageUsageFlags,
    imageSharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: const uint32_t*,
    preTransform: VkSurfaceTransformFlagBitsKHR,
    compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    presentMode: VkPresentModeKHR,
    clipped: VkBool32,
    oldSwapchain: VkSwapchainKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPresentInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: const VkSemaphore*,
    swapchainCount: u32,
    pSwapchains: const VkSwapchainKHR*,
    pImageIndices: const uint32_t*,
    pResults: VkResult*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageSwapchainCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchain: VkSwapchainKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindImageMemorySwapchainInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchain: VkSwapchainKHR,
    imageIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAcquireNextImageInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchain: VkSwapchainKHR,
    timeout: u64,
    semaphore: VkSemaphore,
    fence: VkFence,
    deviceMask: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceGroupPresentCapabilitiesKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    SIZE: VK_MAX_DEVICE_GROUP_,
    modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceGroupPresentInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchainCount: u32,
    pDeviceMasks: const uint32_t*,
    mode: VkDeviceGroupPresentModeFlagBitsKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayPropertiesKHR {
    display: VkDisplayKHR,
    displayName: const char*,
    physicalDimensions: VkExtent2D,
    physicalResolution: VkExtent2D,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    planeReorderPossible: VkBool32,
    persistentContent: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayModeParametersKHR {
    visibleRegion: VkExtent2D,
    refreshRate: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayModePropertiesKHR {
    displayMode: VkDisplayModeKHR,
    parameters: VkDisplayModeParametersKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayModeCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDisplayModeCreateFlagsKHR,
    parameters: VkDisplayModeParametersKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayPlaneCapabilitiesKHR {
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
    minSrcPosition: VkOffset2D,
    maxSrcPosition: VkOffset2D,
    minSrcExtent: VkExtent2D,
    maxSrcExtent: VkExtent2D,
    minDstPosition: VkOffset2D,
    maxDstPosition: VkOffset2D,
    minDstExtent: VkExtent2D,
    maxDstExtent: VkExtent2D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayPlanePropertiesKHR {
    currentDisplay: VkDisplayKHR,
    currentStackIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplaySurfaceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDisplaySurfaceCreateFlagsKHR,
    displayMode: VkDisplayModeKHR,
    planeIndex: u32,
    planeStackIndex: u32,
    transform: VkSurfaceTransformFlagBitsKHR,
    globalAlpha: f32,
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
    imageExtent: VkExtent2D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayPresentInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    srcRect: VkRect2D,
    dstRect: VkRect2D,
    persistent: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImportMemoryFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    fd: int,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryFdPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryTypeBits: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryGetFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    memory: VkDeviceMemory,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImportSemaphoreFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphore: VkSemaphore,
    flags: VkSemaphoreImportFlags,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
    fd: int,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSemaphoreGetFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    semaphore: VkSemaphore,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxPushDescriptors: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRectLayerKHR {
    offset: VkOffset2D,
    extent: VkExtent2D,
    layer: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPresentRegionKHR {
    rectangleCount: u32,
    pRectangles: const VkRectLayerKHR*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPresentRegionsKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchainCount: u32,
    pRegions: const VkPresentRegionKHR*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    sharedPresentSupportedUsageFlags: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImportFenceFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    fence: VkFence,
    flags: VkFenceImportFlags,
    handleType: VkExternalFenceHandleTypeFlagBits,
    fd: int,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkFenceGetFdInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    fence: VkFence,
    handleType: VkExternalFenceHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    performanceCounterQueryPools: VkBool32,
    performanceCounterMultipleQueryPools: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    allowCommandBufferQueryCopies: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPerformanceCounterKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    unit: VkPerformanceCounterUnitKHR,
    scope: VkPerformanceCounterScopeKHR,
    storage: VkPerformanceCounterStorageKHR,
    SIZE: VK_UUID_,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPerformanceCounterDescriptionKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPerformanceCounterDescriptionFlagsKHR,
    SIZE: VK_MAX_DESCRIPTION_,
    SIZE: VK_MAX_DESCRIPTION_,
    SIZE: VK_MAX_DESCRIPTION_,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkQueryPoolPerformanceCreateInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    queueFamilyIndex: u32,
    counterIndexCount: u32,
    pCounterIndices: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAcquireProfilingLockInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkAcquireProfilingLockFlagsKHR,
    timeout: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPerformanceQuerySubmitInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    counterPassIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR {
    sType: VkStructureType,
    pNext: *const c_void,
    surface: VkSurfaceKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSurfaceCapabilities2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    surfaceCapabilities: VkSurfaceCapabilitiesKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSurfaceFormat2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    surfaceFormat: VkSurfaceFormatKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayProperties2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    displayProperties: VkDisplayPropertiesKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayPlaneProperties2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    displayPlaneProperties: VkDisplayPlanePropertiesKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayModeProperties2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    displayModeProperties: VkDisplayModePropertiesKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayPlaneInfo2KHR {
    sType: VkStructureType,
    pNext: *const c_void,
    mode: VkDisplayModeKHR,
    planeIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayPlaneCapabilities2KHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    capabilities: VkDisplayPlaneCapabilitiesKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderClockFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderSubgroupClock: VkBool32,
    shaderDeviceClock: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSurfaceProtectedCapabilitiesKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    supportsProtected: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    pipelineExecutableInfo: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    pipeline: VkPipeline,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineExecutablePropertiesKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    stages: VkShaderStageFlags,
    SIZE: VK_MAX_DESCRIPTION_,
    SIZE: VK_MAX_DESCRIPTION_,
    subgroupSize: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineExecutableInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    pipeline: VkPipeline,
    executableIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineExecutableStatisticKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    SIZE: VK_MAX_DESCRIPTION_,
    SIZE: VK_MAX_DESCRIPTION_,
    format: VkPipelineExecutableStatisticFormatKHR,
    value: VkPipelineExecutableStatisticValueKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineExecutableInternalRepresentationKHR {
    sType: VkStructureType,
    pNext: *mut c_void,
    SIZE: VK_MAX_DESCRIPTION_,
    SIZE: VK_MAX_DESCRIPTION_,
    isText: VkBool32,
    dataSize: size_t,
    pData: *mut c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDebugReportCallbackCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDebugReportFlagsEXT,
    pfnCallback: PFN_vkDebugReportCallbackEXT,
    pUserData: *mut c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD {
    sType: VkStructureType,
    pNext: *const c_void,
    rasterizationOrder: VkRasterizationOrderAMD,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDebugMarkerObjectNameInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    pObjectName: const char*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDebugMarkerObjectTagInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    tagName: u64,
    tagSize: size_t,
    pTag: *const c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDebugMarkerMarkerInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    pMarkerName: const char*,
    color: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDedicatedAllocationImageCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    dedicatedAllocation: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDedicatedAllocationBufferCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    dedicatedAllocation: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    image: VkImage,
    buffer: VkBuffer,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    transformFeedback: VkBool32,
    geometryStreams: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxTransformFeedbackStreams: u32,
    maxTransformFeedbackBuffers: u32,
    maxTransformFeedbackBufferSize: VkDeviceSize,
    maxTransformFeedbackStreamDataSize: u32,
    maxTransformFeedbackBufferDataSize: u32,
    maxTransformFeedbackBufferDataStride: u32,
    transformFeedbackQueries: VkBool32,
    transformFeedbackStreamsLinesTriangles: VkBool32,
    transformFeedbackRasterizationStreamSelect: VkBool32,
    transformFeedbackDraw: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
    rasterizationStream: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageViewHandleInfoNVX {
    sType: VkStructureType,
    pNext: *const c_void,
    imageView: VkImageView,
    descriptorType: VkDescriptorType,
    sampler: VkSampler,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageViewAddressPropertiesNVX {
    sType: VkStructureType,
    pNext: *mut c_void,
    deviceAddress: VkDeviceAddress,
    size: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkTextureLODGatherFormatPropertiesAMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    supportsTextureGatherLODBiasAMD: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkShaderResourceUsageAMD {
    numUsedVgprs: u32,
    numUsedSgprs: u32,
    ldsSizePerLocalWorkGroup: u32,
    ldsUsageSizeInBytes: size_t,
    scratchMemUsageInBytes: size_t,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkShaderStatisticsInfoAMD {
    shaderStageMask: VkShaderStageFlags,
    resourceUsage: VkShaderResourceUsageAMD,
    numPhysicalVgprs: u32,
    numPhysicalSgprs: u32,
    numAvailableVgprs: u32,
    numAvailableSgprs: u32,
    computeWorkGroupSize: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    cornerSampledImage: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExternalImageFormatPropertiesNV {
    imageFormatProperties: VkImageFormatProperties,
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExternalMemoryImageCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkExportMemoryAllocateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkValidationFlagsEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    disabledValidationCheckCount: u32,
    pDisabledValidationChecks: const VkValidationCheckEXT*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    HDR: VkBool32           textureCompressionASTC_,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageViewASTCDecodeModeEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    decodeMode: VkFormat,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    decodeModeSharedExponent: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkConditionalRenderingBeginInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    flags: VkConditionalRenderingFlagsEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    conditionalRendering: VkBool32,
    inheritedConditionalRendering: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    conditionalRenderingEnable: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkViewportWScalingNV {
    xcoeff: f32,
    ycoeff: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    viewportWScalingEnable: VkBool32,
    viewportCount: u32,
    pViewportWScalings: const VkViewportWScalingNV*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSurfaceCapabilities2EXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayPowerInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    powerState: VkDisplayPowerStateEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceEventInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceEvent: VkDeviceEventTypeEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayEventInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    displayEvent: VkDisplayEventTypeEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSwapchainCounterCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    surfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRefreshCycleDurationGOOGLE {
    refreshDuration: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPastPresentationTimingGOOGLE {
    presentID: u32,
    desiredPresentTime: u64,
    actualPresentTime: u64,
    earliestPresentTime: u64,
    presentMargin: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPresentTimeGOOGLE {
    presentID: u32,
    desiredPresentTime: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPresentTimesInfoGOOGLE {
    sType: VkStructureType,
    pNext: *const c_void,
    swapchainCount: u32,
    pTimes: const VkPresentTimeGOOGLE*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    sType: VkStructureType,
    pNext: *mut c_void,
    perViewPositionAllComponents: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkViewportSwizzleNV {
    x: VkViewportCoordinateSwizzleNV,
    y: VkViewportCoordinateSwizzleNV,
    z: VkViewportCoordinateSwizzleNV,
    w: VkViewportCoordinateSwizzleNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
    viewportCount: u32,
    pViewportSwizzles: const VkViewportSwizzleNV*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxDiscardRectangles: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
    discardRectangleMode: VkDiscardRectangleModeEXT,
    discardRectangleCount: u32,
    pDiscardRectangles: const VkRect2D*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    primitiveOverestimationSize: f32,
    maxExtraPrimitiveOverestimationSize: f32,
    extraPrimitiveOverestimationSizeGranularity: f32,
    primitiveUnderestimation: VkBool32,
    conservativePointAndLineRasterization: VkBool32,
    degenerateTrianglesRasterized: VkBool32,
    degenerateLinesRasterized: VkBool32,
    fullyCoveredFragmentShaderInputVariable: VkBool32,
    conservativeRasterizationPostDepthCoverage: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    extraPrimitiveOverestimationSize: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    depthClipEnable: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
    depthClipEnable: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkXYColorEXT {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkHdrMetadataEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    displayPrimaryRed: VkXYColorEXT,
    displayPrimaryGreen: VkXYColorEXT,
    displayPrimaryBlue: VkXYColorEXT,
    whitePoint: VkXYColorEXT,
    maxLuminance: f32,
    minLuminance: f32,
    maxContentLightLevel: f32,
    maxFrameAverageLightLevel: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDebugUtilsLabelEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    pLabelName: const char*,
    color: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDebugUtilsObjectNameInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    objectType: VkObjectType,
    objectHandle: u64,
    pObjectName: const char*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDebugUtilsMessengerCallbackDataEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
    pMessageIdName: const char*,
    messageIdNumber: i32,
    pMessage: const char*,
    queueLabelCount: u32,
    pQueueLabels: const VkDebugUtilsLabelEXT*,
    cmdBufLabelCount: u32,
    pCmdBufLabels: const VkDebugUtilsLabelEXT*,
    objectCount: u32,
    pObjects: const VkDebugUtilsObjectNameInfoEXT*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDebugUtilsObjectTagInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    objectType: VkObjectType,
    objectHandle: u64,
    tagName: u64,
    tagSize: size_t,
    pTag: *const c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDebugUtilsMessengerCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDebugUtilsMessengerCreateFlagsEXT,
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
    messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pUserData: *mut c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    inlineUniformBlock: VkBool32,
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxInlineUniformBlockSize: u32,
    maxPerStageDescriptorInlineUniformBlocks: u32,
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    maxDescriptorSetInlineUniformBlocks: u32,
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkWriteDescriptorSetInlineUniformBlockEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    dataSize: u32,
    pData: *const c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    maxInlineUniformBlockBindings: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSampleLocationEXT {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSampleLocationsInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    sampleLocationsPerPixel: VkSampleCountFlagBits,
    sampleLocationGridSize: VkExtent2D,
    sampleLocationsCount: u32,
    pSampleLocations: const VkSampleLocationEXT*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAttachmentSampleLocationsEXT {
    attachmentIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSubpassSampleLocationsEXT {
    subpassIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    attachmentInitialSampleLocationsCount: u32,
    pAttachmentInitialSampleLocations: const VkAttachmentSampleLocationsEXT*,
    postSubpassSampleLocationsCount: u32,
    pPostSubpassSampleLocations: const VkSubpassSampleLocationsEXT*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    sampleLocationsEnable: VkBool32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    sampleLocationSampleCounts: VkSampleCountFlags,
    maxSampleLocationGridSize: VkExtent2D,
    sampleLocationCoordinateRange: f32,
    sampleLocationSubPixelBits: u32,
    variableSampleLocations: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMultisamplePropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxSampleLocationGridSize: VkExtent2D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    advancedBlendCoherentOperations: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    advancedBlendMaxColorAttachments: u32,
    advancedBlendIndependentBlend: VkBool32,
    advancedBlendNonPremultipliedSrcColor: VkBool32,
    advancedBlendNonPremultipliedDstColor: VkBool32,
    advancedBlendCorrelatedOverlap: VkBool32,
    advancedBlendAllOperations: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    srcPremultiplied: VkBool32,
    dstPremultiplied: VkBool32,
    blendOverlap: VkBlendOverlapEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCoverageToColorStateCreateFlagsNV,
    coverageToColorEnable: VkBool32,
    coverageToColorLocation: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCoverageModulationStateCreateFlagsNV,
    coverageModulationMode: VkCoverageModulationModeNV,
    coverageModulationTableEnable: VkBool32,
    coverageModulationTableCount: u32,
    pCoverageModulationTable: const float*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderSMCount: u32,
    shaderWarpsPerSM: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderSMBuiltins: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDrmFormatModifierPropertiesEXT {
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDrmFormatModifierPropertiesListEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifierProperties: VkDrmFormatModifierPropertiesEXT*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    drmFormatModifier: u64,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifiers: const uint64_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    pPlaneLayouts: const VkSubresourceLayout*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImageDrmFormatModifierPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    drmFormatModifier: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkValidationCacheCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkValidationCacheCreateFlagsEXT,
    initialDataSize: size_t,
    pInitialData: *const c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    validationCache: VkValidationCacheEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkShadingRatePaletteNV {
    shadingRatePaletteEntryCount: u32,
    pShadingRatePaletteEntries: const VkShadingRatePaletteEntryNV*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    shadingRateImageEnable: VkBool32,
    viewportCount: u32,
    pShadingRatePalettes: const VkShadingRatePaletteNV*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shadingRateImage: VkBool32,
    shadingRateCoarseSampleOrder: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shadingRateTexelSize: VkExtent2D,
    shadingRatePaletteSize: u32,
    shadingRateMaxCoarseSamples: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCoarseSampleLocationNV {
    pixelX: u32,
    pixelY: u32,
    sample: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCoarseSampleOrderCustomNV {
    shadingRate: VkShadingRatePaletteEntryNV,
    sampleCount: u32,
    sampleLocationCount: u32,
    pSampleLocations: const VkCoarseSampleLocationNV*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    sampleOrderType: VkCoarseSampleOrderTypeNV,
    customSampleOrderCount: u32,
    pCustomSampleOrders: const VkCoarseSampleOrderCustomNV*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRayTracingShaderGroupCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    type: VkRayTracingShaderGroupTypeKHR,
    generalShader: u32,
    closestHitShader: u32,
    anyHitShader: u32,
    intersectionShader: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRayTracingPipelineCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: const VkPipelineShaderStageCreateInfo*,
    groupCount: u32,
    pGroups: const VkRayTracingShaderGroupCreateInfoNV*,
    maxRecursionDepth: u32,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkGeometryTrianglesNV {
    sType: VkStructureType,
    pNext: *const c_void,
    vertexData: VkBuffer,
    vertexOffset: VkDeviceSize,
    vertexCount: u32,
    vertexStride: VkDeviceSize,
    vertexFormat: VkFormat,
    indexData: VkBuffer,
    indexOffset: VkDeviceSize,
    indexCount: u32,
    indexType: VkIndexType,
    transformData: VkBuffer,
    transformOffset: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkGeometryAABBNV {
    sType: VkStructureType,
    pNext: *const c_void,
    aabbData: VkBuffer,
    numAABBs: u32,
    stride: u32,
    offset: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkGeometryDataNV {
    triangles: VkGeometryTrianglesNV,
    aabbs: VkGeometryAABBNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkGeometryNV {
    sType: VkStructureType,
    pNext: *const c_void,
    geometryType: VkGeometryTypeKHR,
    geometry: VkGeometryDataNV,
    flags: VkGeometryFlagsKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAccelerationStructureInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    type: VkAccelerationStructureTypeNV,
    flags: VkBuildAccelerationStructureFlagsNV,
    instanceCount: u32,
    geometryCount: u32,
    pGeometries: const VkGeometryNV*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAccelerationStructureCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    compactedSize: VkDeviceSize,
    info: VkAccelerationStructureInfoNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindAccelerationStructureMemoryInfoKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    accelerationStructure: VkAccelerationStructureKHR,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    deviceIndexCount: u32,
    pDeviceIndices: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkWriteDescriptorSetAccelerationStructureKHR {
    sType: VkStructureType,
    pNext: *const c_void,
    accelerationStructureCount: u32,
    pAccelerationStructures: const VkAccelerationStructureKHR*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    type: VkAccelerationStructureMemoryRequirementsTypeNV,
    accelerationStructure: VkAccelerationStructureNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderGroupHandleSize: u32,
    maxRecursionDepth: u32,
    maxShaderGroupStride: u32,
    shaderGroupBaseAlignment: u32,
    maxGeometryCount: u64,
    maxInstanceCount: u64,
    maxTriangleCount: u64,
    maxDescriptorSetAccelerationStructures: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkTransformMatrixKHR {
    matrix: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAabbPositionsKHR {
    minX: f32,
    minY: f32,
    minZ: f32,
    maxX: f32,
    maxY: f32,
    maxZ: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkAccelerationStructureInstanceKHR {
    transform: VkTransformMatrixKHR,
    4: 2,
    mask: u32,
    4: 2,
    flags: VkGeometryInstanceFlagsKHR,
    accelerationStructureReference: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    representativeFragmentTest: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    representativeFragmentTestEnable: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    imageViewType: VkImageViewType,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    filterCubic: VkBool32,
    filterCubicMinmax: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceQueueGlobalPriorityCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    globalPriority: VkQueueGlobalPriorityEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkImportMemoryHostPointerInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    pHostPointer: *mut c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryHostPointerPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryTypeBits: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    minImportedHostPointerAlignment: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineCompilerControlCreateInfoAMD {
    sType: VkStructureType,
    pNext: *const c_void,
    compilerControlFlags: VkPipelineCompilerControlFlagsAMD,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCalibratedTimestampInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    timeDomain: VkTimeDomainEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderEngineCount: u32,
    shaderArraysPerEngineCount: u32,
    computeUnitsPerShaderArray: u32,
    simdPerComputeUnit: u32,
    wavefrontsPerSimd: u32,
    wavefrontSize: u32,
    sgprsPerSimd: u32,
    minSgprAllocation: u32,
    maxSgprAllocation: u32,
    sgprAllocationGranularity: u32,
    vgprsPerSimd: u32,
    minVgprAllocation: u32,
    maxVgprAllocation: u32,
    vgprAllocationGranularity: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD {
    sType: VkStructureType,
    pNext: *const c_void,
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxVertexAttribDivisor: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkVertexInputBindingDivisorDescriptionEXT {
    binding: u32,
    divisor: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    vertexBindingDivisorCount: u32,
    pVertexBindingDivisors: const VkVertexInputBindingDivisorDescriptionEXT*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    vertexAttributeInstanceRateDivisor: VkBool32,
    vertexAttributeInstanceRateZeroDivisor: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineCreationFeedbackEXT {
    flags: VkPipelineCreationFeedbackFlagsEXT,
    duration: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineCreationFeedbackCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    pPipelineCreationFeedback: VkPipelineCreationFeedbackEXT*,
    pipelineStageCreationFeedbackCount: u32,
    pPipelineStageCreationFeedbacks: VkPipelineCreationFeedbackEXT*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    computeDerivativeGroupQuads: VkBool32,
    computeDerivativeGroupLinear: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    taskShader: VkBool32,
    meshShader: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxDrawMeshTasksCount: u32,
    maxTaskWorkGroupInvocations: u32,
    maxTaskWorkGroupSize: u32,
    maxTaskTotalMemorySize: u32,
    maxTaskOutputCount: u32,
    maxMeshWorkGroupInvocations: u32,
    maxMeshWorkGroupSize: u32,
    maxMeshTotalMemorySize: u32,
    maxMeshOutputVertices: u32,
    maxMeshOutputPrimitives: u32,
    maxMeshMultiviewViewCount: u32,
    meshOutputPerVertexGranularity: u32,
    meshOutputPerPrimitiveGranularity: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDrawMeshTasksIndirectCommandNV {
    taskCount: u32,
    firstTask: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    fragmentShaderBarycentric: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    imageFootprint: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    exclusiveScissorCount: u32,
    pExclusiveScissors: const VkRect2D*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    exclusiveScissor: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkQueueFamilyCheckpointPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    checkpointExecutionStageMask: VkPipelineStageFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCheckpointDataNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    stage: VkPipelineStageFlagBits,
    pCheckpointMarker: *mut c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderIntegerFunctions2: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPerformanceValueINTEL {
    type: VkPerformanceValueTypeINTEL,
    data: VkPerformanceValueDataINTEL,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkInitializePerformanceApiInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    pUserData: *mut c_void,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPerformanceMarkerInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    marker: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPerformanceStreamMarkerInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    marker: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPerformanceOverrideInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    type: VkPerformanceOverrideTypeINTEL,
    enable: VkBool32,
    parameter: u64,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPerformanceConfigurationAcquireInfoINTEL {
    sType: VkStructureType,
    pNext: *const c_void,
    type: VkPerformanceConfigurationTypeINTEL,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    pciDomain: u32,
    pciBus: u32,
    pciDevice: u32,
    pciFunction: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    localDimmingSupport: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    sType: VkStructureType,
    pNext: *const c_void,
    localDimmingEnable: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    fragmentDensityMap: VkBool32,
    fragmentDensityMapDynamic: VkBool32,
    fragmentDensityMapNonSubsampledImages: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    minFragmentDensityTexelSize: VkExtent2D,
    maxFragmentDensityTexelSize: VkExtent2D,
    fragmentDensityInvocations: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    fragmentDensityMapAttachment: VkAttachmentReference,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    subgroupSizeControl: VkBool32,
    computeFullSubgroups: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    minSubgroupSize: u32,
    maxSubgroupSize: u32,
    maxComputeWorkgroupSubgroups: u32,
    requiredSubgroupSizeStages: VkShaderStageFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    requiredSubgroupSize: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderCoreProperties2AMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
    activeComputeUnitCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    sType: VkStructureType,
    pNext: *mut c_void,
    deviceCoherentMemory: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    HEAPS: VK_MAX_MEMORY_,
    HEAPS: VK_MAX_MEMORY_,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    memoryPriority: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkMemoryPriorityAllocateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    priority: f32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    dedicatedAllocationImageAliasing: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBufferDeviceAddressCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    deviceAddress: VkDeviceAddress,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceToolPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    SIZE: VK_MAX_EXTENSION_NAME_,
    SIZE: VK_MAX_EXTENSION_NAME_,
    purposes: VkToolPurposeFlagsEXT,
    SIZE: VK_MAX_DESCRIPTION_,
    SIZE: VK_MAX_EXTENSION_NAME_,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkValidationFeaturesEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    enabledValidationFeatureCount: u32,
    pEnabledValidationFeatures: const VkValidationFeatureEnableEXT*,
    disabledValidationFeatureCount: u32,
    pDisabledValidationFeatures: const VkValidationFeatureDisableEXT*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCooperativeMatrixPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    MSize: u32,
    NSize: u32,
    KSize: u32,
    AType: VkComponentTypeNV,
    BType: VkComponentTypeNV,
    CType: VkComponentTypeNV,
    DType: VkComponentTypeNV,
    scope: VkScopeNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    cooperativeMatrix: VkBool32,
    cooperativeMatrixRobustBufferAccess: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    cooperativeMatrixSupportedStages: VkShaderStageFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    coverageReductionMode: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPipelineCoverageReductionStateCreateFlagsNV,
    coverageReductionMode: VkCoverageReductionModeNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkFramebufferMixedSamplesCombinationNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    coverageReductionMode: VkCoverageReductionModeNV,
    rasterizationSamples: VkSampleCountFlagBits,
    depthStencilSamples: VkSampleCountFlags,
    colorSamples: VkSampleCountFlags,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    fragmentShaderSampleInterlock: VkBool32,
    fragmentShaderPixelInterlock: VkBool32,
    fragmentShaderShadingRateInterlock: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    ycbcrImageArrays: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkHeadlessSurfaceCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkHeadlessSurfaceCreateFlagsEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceLineRasterizationFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    rectangularLines: VkBool32,
    bresenhamLines: VkBool32,
    smoothLines: VkBool32,
    stippledRectangularLines: VkBool32,
    stippledBresenhamLines: VkBool32,
    stippledSmoothLines: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceLineRasterizationPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    lineSubPixelPrecisionBits: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPipelineRasterizationLineStateCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    lineRasterizationMode: VkLineRasterizationModeEXT,
    stippledLineEnable: VkBool32,
    lineStippleFactor: u32,
    lineStipplePattern: u16,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    indexTypeUint8: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    shaderDemoteToHelperInvocation: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxGraphicsShaderGroupCount: u32,
    maxIndirectSequenceCount: u32,
    maxIndirectCommandsTokenCount: u32,
    maxIndirectCommandsStreamCount: u32,
    maxIndirectCommandsTokenOffset: u32,
    maxIndirectCommandsStreamStride: u32,
    minSequencesCountBufferOffsetAlignment: u32,
    minSequencesIndexBufferOffsetAlignment: u32,
    minIndirectCommandsBufferOffsetAlignment: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    deviceGeneratedCommands: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkGraphicsShaderGroupCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    stageCount: u32,
    pStages: const VkPipelineShaderStageCreateInfo*,
    pVertexInputState: const VkPipelineVertexInputStateCreateInfo*,
    pTessellationState: const VkPipelineTessellationStateCreateInfo*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    groupCount: u32,
    pGroups: const VkGraphicsShaderGroupCreateInfoNV*,
    pipelineCount: u32,
    pPipelines: const VkPipeline*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindShaderGroupIndirectCommandNV {
    groupIndex: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindIndexBufferIndirectCommandNV {
    bufferAddress: VkDeviceAddress,
    size: u32,
    indexType: VkIndexType,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkBindVertexBufferIndirectCommandNV {
    bufferAddress: VkDeviceAddress,
    size: u32,
    stride: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSetStateFlagsIndirectCommandNV {
    data: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkIndirectCommandsStreamNV {
    buffer: VkBuffer,
    offset: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkIndirectCommandsLayoutTokenNV {
    sType: VkStructureType,
    pNext: *const c_void,
    tokenType: VkIndirectCommandsTokenTypeNV,
    stream: u32,
    offset: u32,
    vertexBindingUnit: u32,
    vertexDynamicStride: VkBool32,
    pushconstantPipelineLayout: VkPipelineLayout,
    pushconstantShaderStageFlags: VkShaderStageFlags,
    pushconstantOffset: u32,
    pushconstantSize: u32,
    indirectStateFlags: VkIndirectStateFlagsNV,
    indexTypeCount: u32,
    pIndexTypes: const VkIndexType*,
    pIndexTypeValues: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkIndirectCommandsLayoutCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkIndirectCommandsLayoutUsageFlagsNV,
    pipelineBindPoint: VkPipelineBindPoint,
    tokenCount: u32,
    pTokens: const VkIndirectCommandsLayoutTokenNV*,
    streamCount: u32,
    pStreamStrides: const uint32_t*,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkGeneratedCommandsInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    pipelineBindPoint: VkPipelineBindPoint,
    pipeline: VkPipeline,
    indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    streamCount: u32,
    pStreams: const VkIndirectCommandsStreamNV*,
    sequencesCount: u32,
    preprocessBuffer: VkBuffer,
    preprocessOffset: VkDeviceSize,
    preprocessSize: VkDeviceSize,
    sequencesCountBuffer: VkBuffer,
    sequencesCountOffset: VkDeviceSize,
    sequencesIndexBuffer: VkBuffer,
    sequencesIndexOffset: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    pipelineBindPoint: VkPipelineBindPoint,
    pipeline: VkPipeline,
    indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    maxSequencesCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    texelBufferAlignment: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkRenderPassTransformBeginInfoQCOM {
    sType: VkStructureType,
    pNext: *mut c_void,
    transform: VkSurfaceTransformFlagBitsKHR,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    sType: VkStructureType,
    pNext: *mut c_void,
    transform: VkSurfaceTransformFlagBitsKHR,
    renderArea: VkRect2D,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceRobustness2FeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    robustBufferAccess2: VkBool32,
    robustImageAccess2: VkBool32,
    nullDescriptor: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceRobustness2PropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    robustStorageBufferAccessSizeAlignment: VkDeviceSize,
    robustUniformBufferAccessSizeAlignment: VkDeviceSize,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkSamplerCustomBorderColorCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    customBorderColor: VkClearColorValue,
    format: VkFormat,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    maxCustomBorderColorSamplers: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    customBorderColors: VkBool32,
    customBorderColorWithoutFormat: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevicePrivateDataFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    privateData: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDevicePrivateDataCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    privateDataSlotRequestCount: u32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPrivateDataSlotCreateInfoEXT {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkPrivateDataSlotCreateFlagsEXT,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT {
    sType: VkStructureType,
    pNext: *mut c_void,
    pipelineCreationCacheControl: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    sType: VkStructureType,
    pNext: *mut c_void,
    diagnosticsConfig: VkBool32,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkDeviceDiagnosticsConfigCreateInfoNV {
    sType: VkStructureType,
    pNext: *const c_void,
    flags: VkDeviceDiagnosticsConfigFlagsNV,
}
#[repr(C)]
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Default)]
pub struct VkContext {
}
